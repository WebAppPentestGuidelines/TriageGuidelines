<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>5章 事例 on 脆弱性トリアージガイドライン作成の手引き</title><link>https://webapppentestguidelines.github.io/TriageGuidelines/docs/chapter5/</link><description>Recent content in 5章 事例 on 脆弱性トリアージガイドライン作成の手引き</description><generator>Hugo</generator><language>ja</language><atom:link href="https://webapppentestguidelines.github.io/TriageGuidelines/docs/chapter5/index.xml" rel="self" type="application/rss+xml"/><item><title>脆弱性対応フローが明確化されていなかった組織事例</title><link>https://webapppentestguidelines.github.io/TriageGuidelines/docs/chapter5/section1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://webapppentestguidelines.github.io/TriageGuidelines/docs/chapter5/section1/</guid><description>&lt;h1 id="脆弱性対応フローが明確化されていなかった組織事例">
 脆弱性対応フローが明確化されていなかった組織事例
 &lt;a class="anchor" href="#%e8%84%86%e5%bc%b1%e6%80%a7%e5%af%be%e5%bf%9c%e3%83%95%e3%83%ad%e3%83%bc%e3%81%8c%e6%98%8e%e7%a2%ba%e5%8c%96%e3%81%95%e3%82%8c%e3%81%a6%e3%81%84%e3%81%aa%e3%81%8b%e3%81%a3%e3%81%9f%e7%b5%84%e7%b9%94%e4%ba%8b%e4%be%8b">#&lt;/a>
&lt;/h1>
&lt;p>商社系のA社では、小規模なシステムを管理していますが、脆弱性対応について明確なポリシーはありませんでした。ニュースなどで報道されるものについて対応する、という状況でした。&lt;br>
自社のサイバーセキュリティ対策を強化することになり、脆弱性トリアージや対応について判断基準を決め、対応の標準化を行うことを決定しました。&lt;/p>
&lt;p>まず、対応の全体像を決定しました。1章の「脆弱性対応の判断フロー」において、どのタイミングで何を行うのか、その際の判断根拠となる社内規定等はあるのか/なければ整備する必要があるのかを検討しました。&lt;/p>
&lt;p>次に、脆弱性対応の優先度判断となる脆弱性トリアージ基準を策定しました。脆弱性トリアージを組織として行うことに慣れていないため、まずはCVSS BaseScoreを基準に設定しました。まずは、複雑ではなく単純化し、運用に慣れてきたら判断基準を変更していくという戦略です。&lt;/p>
&lt;ul>
&lt;li>9.5以上(重大度:Critical)：1週間程度以内で対応し、場合によっては業務を止める&lt;/li>
&lt;li>8.0以上(重大度:High)：なるべく早く対応する（2週間程度以内）&lt;/li>
&lt;li>8.0未満：早急に適用する必要はないが、定期メンテナンス等で適用を検討する&lt;/li>
&lt;/ul>
&lt;p>その後、脆弱性対応に対する基準を策定しました。例えば更新プログラムを適用することを想定した場合、どのようなプロセスが必要なのか、その為の準備はできているかなどを確認し、整備しました。テスト環境が本番と同じ状態か、更新後の稼働テストは何を確認するのか、等です。&lt;/p>
&lt;p>そして、脆弱性情報の取得方法や、対象システムの現状把握を行いました。1章の「脆弱性対応の判断フロー」にもある通り、脆弱性の認知と影響分析が必要です。&lt;br>
まずは対象システムの構成を把握し、利用しているソフトウェアの棚卸を行いました。これにより、脆弱性を把握すべきソフトウェアが特定され、情報収集がやりやすくなります。また、これらを自動化するために、脆弱性管理ソフトウェアを入れました。&lt;/p>
&lt;p>これらにより、脆弱性認知速度が上がり、より早く対応が必要かを判断することができるようになりました。今までは被害影響が出たニュースを基に対応していましたが、脆弱性情報が出たタイミングで自システムが対象になるのかを判断できる状況になりました。&lt;/p>
&lt;p>上記運用をしばらく続けた中で、&amp;ldquo;対応すべきと判断される脆弱性の数&amp;quot;が多いと感じる点が、課題となっています。これは脆弱性トリアージでCVSS BaseScoreのみを利用しており、実際のリスクでの判断とはなっていない点が関連しています。今後、攻撃される可能性の評価として、EPSSやKEVカタログなどを取り入れることで、トリアージ基準を脆弱性自体の危険度から事業へのリスクに変えていく方針としています。&lt;/p>
&lt;p>今回の事例では、以下が言えると思います。&lt;/p>
&lt;ul>
&lt;li>まずは小さく始める
&lt;ul>
&lt;li>脆弱性トリアージでは、最初から複雑な基準を盛り込むと、破綻する可能性があります&lt;/li>
&lt;li>理想論は一旦置いておき、「現実に対応できる/しきれる 基準」を設定します&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>実際に脆弱性トリアージを行って、課題を感じたら変更していく
&lt;ul>
&lt;li>課題を感じた時点で、現状のフローや基準を見直し、自組織の体力に合わせて調整することが望ましいと考えられます&lt;/li>
&lt;li>状況により、人員の増強やソフトウェアの導入も検討が必要です&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul></description></item><item><title>ビジネスインパクトを考慮した結果優先度が下がった事例</title><link>https://webapppentestguidelines.github.io/TriageGuidelines/docs/chapter5/section2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://webapppentestguidelines.github.io/TriageGuidelines/docs/chapter5/section2/</guid><description>&lt;h1 id="ビジネスインパクトを考慮した結果優先度が下がった事例">
 ビジネスインパクトを考慮した結果優先度が下がった事例
 &lt;a class="anchor" href="#%e3%83%93%e3%82%b8%e3%83%8d%e3%82%b9%e3%82%a4%e3%83%b3%e3%83%91%e3%82%af%e3%83%88%e3%82%92%e8%80%83%e6%85%ae%e3%81%97%e3%81%9f%e7%b5%90%e6%9e%9c%e5%84%aa%e5%85%88%e5%ba%a6%e3%81%8c%e4%b8%8b%e3%81%8c%e3%81%a3%e3%81%9f%e4%ba%8b%e4%be%8b">#&lt;/a>
&lt;/h1>
&lt;h2 id="トリアージ対象の脆弱性cve-2022-3080">
 トリアージ対象の脆弱性：CVE-2022-3080
 &lt;a class="anchor" href="#%e3%83%88%e3%83%aa%e3%82%a2%e3%83%bc%e3%82%b8%e5%af%be%e8%b1%a1%e3%81%ae%e8%84%86%e5%bc%b1%e6%80%a7cve-2022-3080">#&lt;/a>
&lt;/h2>
&lt;p>CVE-2022-3080はBIND 9と呼ばれるDNSサーバーの実装に発見された脆弱性です。&lt;br>
この脆弱性は、クライアントからフルサービスリゾルバとして動作するBIND 9のDNSサーバーに対し、細工された問い合わせを送信することにより、特定の条件下でサービス不能（DoS）にさせることができるものです。&lt;br>
CVSSスコアは7.5となっています。&lt;/p>
&lt;h2 id="トリアージを実施するa社の状況">
 トリアージを実施するA社の状況
 &lt;a class="anchor" href="#%e3%83%88%e3%83%aa%e3%82%a2%e3%83%bc%e3%82%b8%e3%82%92%e5%ae%9f%e6%96%bd%e3%81%99%e3%82%8ba%e7%a4%be%e3%81%ae%e7%8a%b6%e6%b3%81">#&lt;/a>
&lt;/h2>
&lt;p>A社は複数のブログやWebメディアを運営する企業であり、ページ上に掲載される広告を主な収益源としています。これらのサービスは自社のオンプレミスサーバー上で提供していますが、社内業務に必要なサービスの多くはクラウドへの移行が完了しており、社内業務で自社のオンプレミスサーバーへアクセスすることはほとんどありません。&lt;br>
A社では、下記の2種類の用途でそれぞれ独立したDNSサーバーを運用しており、いずれも今回の脆弱性の影響を受けるバージョンのBIND 9を利用しています。&lt;/p>
&lt;ul>
&lt;li>権威DNSサーバー：ブログやWebメディアのドメインの問い合わせに応答する。&lt;/li>
&lt;li>フルサービスリゾルバ：社内業務に利用するオフィス端末のインターネットアクセスに利用する。&lt;/li>
&lt;/ul>
&lt;h2 id="トリアージ例">
 トリアージ例
 &lt;a class="anchor" href="#%e3%83%88%e3%83%aa%e3%82%a2%e3%83%bc%e3%82%b8%e4%be%8b">#&lt;/a>
&lt;/h2>
&lt;p>A社では、脆弱性の危険度の分類を低・中・高で分類しており、CVSSスコアが7.5の脆弱性の危険度は「高」として分類されます。&lt;br>
ただし、2種類のDNSサーバーのサービス停止によるビジネスインパクトをそれぞれ下記のように考慮してトリアージを実施しました。&lt;/p>
&lt;ul>
&lt;li>権威DNSサーバー：利用者がブログやWebメディアの閲覧ができなくなり、A社の収益の多くを占める広告収入への影響が大きい。&lt;/li>
&lt;li>フルサービスリゾルバ：社内業務に必要な多くのサービスをクラウド化しており、かつ、代替DNSサーバーとしてISPのDNSサーバーを設定しているため、社内業務への影響は限定的である。&lt;/li>
&lt;/ul>
&lt;p>今回の脆弱性はフルサービスリゾルバのみに影響することから、ビジネスインパクトは限定的であると考え、優先度を下げて対応を実施することとしました。&lt;/p></description></item><item><title>経営者の指示による優先度変更</title><link>https://webapppentestguidelines.github.io/TriageGuidelines/docs/chapter5/section3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://webapppentestguidelines.github.io/TriageGuidelines/docs/chapter5/section3/</guid><description>&lt;h1 id="経営者の指示による優先度変更">
 経営者の指示による優先度変更
 &lt;a class="anchor" href="#%e7%b5%8c%e5%96%b6%e8%80%85%e3%81%ae%e6%8c%87%e7%a4%ba%e3%81%ab%e3%82%88%e3%82%8b%e5%84%aa%e5%85%88%e5%ba%a6%e5%a4%89%e6%9b%b4">#&lt;/a>
&lt;/h1>
&lt;p>経営判断により脆弱性対応よりもリリースを優先しなければいけない案件が存在することもあります。&lt;/p>
&lt;p>例として次のような事例を考えてみましょう。&lt;br>
「会社の代表が株主総会で会社の認証システムをすべて顔認証システムに3ヶ月以内に切り替えると株主に伝えて社員がその場で初めて内容を認識した」とした場合です。&lt;/p>
&lt;p>上記の場合、3ヶ月という短納期の中で開発から脆弱性診断を実施するという流れの中で他案件との兼ね合いや他フローとの兼ね合いで十全に脆弱性診断を実施ができず現場としては無理難題であるため期限内に組織で定められた脆弱性トリアージ実施をしてリリースすることが難しい可能性が考えられます。&lt;/p>
&lt;p>しかし、ビジネスインパクトを考えた際に、IRとして会社代表が出していることから、ブランドイメージの悪化や株価への悪影響が考えられます。&lt;/p>
&lt;p>そのため、上記の場合にはトップダウンで実施しなければならない案件として例外的な対応を行う必要があります。&lt;/p>
&lt;p>仮に会社の脆弱性トリアージの実施規定として以下のようなものがあるとします。&lt;/p>
&lt;p>【社内規定での脆弱性トリアージ】&lt;/p>
&lt;ul>
&lt;li>リスク値は緊急、高、中、低の4段階で考えられるとする&lt;/li>
&lt;li>リスク中以上の脆弱性はリリース前に全て修正して実施する&lt;/li>
&lt;/ul>
&lt;p>今回のケースでは、3ヶ月という短納期の中で実施しなければならないため、十分な脆弱性診断の期間と修正期間が無く、脆弱性トリアージ規定を満たせない可能性があります。つまり、想定していたよりもリスクが高い状態のままリリースするという経営判断をすることになります。&lt;/p>
&lt;p>そのため、以下のような例外を作り、組織として最終的にリスクを減らすための方針を立てることもあります。&lt;/p>
&lt;p>【組織的例外フロー】&lt;/p>
&lt;ul>
&lt;li>組織の代表のトップダウン案件は他案件より優先して脆弱性診断を実施する&lt;/li>
&lt;li>組織の代表のトップダウン案件で検出された脆弱性は、リスク高以上はリリース前に対策を実施して、リリース後1ヶ月以内にリスク中の脆弱性の対策を実施する&lt;/li>
&lt;li>残存した脆弱性に関してインシデントが起きた際には組織の代表が責任を取る&lt;/li>
&lt;/ul>
&lt;p>日常の運用とは異なる例外的なフローを設けたことで、ビジネスインパクトを考慮することができました。&lt;/p>
&lt;p>(経営者が判断したポイントは？)&lt;br>
・3か月でシステムをリリースすることを決定した
・組織的例外フローを受け入れた（リスク受容した）
・事故ったときの責任は下々ではなく経営者だぞ&lt;/p>
&lt;p>今回の例の中で、経営者が判断したポイントとなるのは下記の3点となります。&lt;/p>
&lt;ul>
&lt;li>
&lt;p>短期間でのリリース方針&lt;br>
３ヶ月という短期間でのシステムリリースを決定することで、ビジネス価値の最大化に繋がります。
しかし、今回のケースとは異なり、脆弱性が多数発見された場合には、経営者の判断で、リリース時には重要度の高い中でも特に重要なものに対して優先的に対応を行うといったトリアージが必要となります。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>例外承認 (リスク受容)&lt;br>
経営者が組織的例外フローを受け入れて実施することで、迅速な意思決定が可能となり、責任の所在も明確になります。しかし、例外的なフローはあくまで緊急時や特別な状況における対応であり、推奨されるものではありません。そのため、例外承認を行う場合には、経営者（責任者）が慎重に判断し、適切なリスク評価を行うことが重要です。&lt;br>
さらに、例外承認後には脆弱性をトレースし、対応期限を設定することが求められます。また、監視体制の強化やリスク低減策の導入など、継続的な管理が効果的です。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>インシデントの担当責任を明確にする&lt;br>
リスクを残したままサービスをリリースすることで、インシデントが発生する可能性があります。万が一インシデントが発生した場合、その責任はセキュリティ担当者ではなく、経営者が負うことでビジネス全体に関わる問題であるとしてリスク管理を明確にできます。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>経営判断として、時にはビジネスが優先されることもあります。しかし、脆弱性を放置したことによって、それ以上のダメージを負うことも考えられます。
経営者には、そういったリスクがあることも伝えた上で、経営判断を行ってもらう必要があるでしょう。&lt;/p></description></item></channel></rss>