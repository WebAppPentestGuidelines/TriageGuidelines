<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>2章 トリアージの精度向上 on 脆弱性トリアージガイドライン作成の手引き</title><link>https://webapppentestguidelines.github.io/TriageGuidelines/docs/chapter2/</link><description>Recent content in 2章 トリアージの精度向上 on 脆弱性トリアージガイドライン作成の手引き</description><generator>Hugo</generator><language>ja</language><atom:link href="https://webapppentestguidelines.github.io/TriageGuidelines/docs/chapter2/index.xml" rel="self" type="application/rss+xml"/><item><title>脆弱性の影響範囲</title><link>https://webapppentestguidelines.github.io/TriageGuidelines/docs/chapter2/section1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://webapppentestguidelines.github.io/TriageGuidelines/docs/chapter2/section1/</guid><description>&lt;h1 id="脆弱性の影響範囲">
 脆弱性の影響範囲
 &lt;a class="anchor" href="#%e8%84%86%e5%bc%b1%e6%80%a7%e3%81%ae%e5%bd%b1%e9%9f%bf%e7%af%84%e5%9b%b2">#&lt;/a>
&lt;/h1>
&lt;p>脆弱性がシステムに与える影響範囲を評価し、その精度を向上させます。たとえサービスが一般公開されていても、脆弱性の影響範囲が限定されることがあります。例えば、古いブラウザを利用しているユーザーなど、限定された利用者にのみ影響する脆弱性などです。
このような場合、影響範囲が限定されるため、対応の優先度を下げることも可能です。
これらの判断を行うためには、システムの内部仕様を理解することが重要になります。&lt;/p>
&lt;h2 id="システムの内部仕様の理解が必要な理由">
 システムの内部仕様の理解が必要な理由
 &lt;a class="anchor" href="#%e3%82%b7%e3%82%b9%e3%83%86%e3%83%a0%e3%81%ae%e5%86%85%e9%83%a8%e4%bb%95%e6%a7%98%e3%81%ae%e7%90%86%e8%a7%a3%e3%81%8c%e5%bf%85%e8%a6%81%e3%81%aa%e7%90%86%e7%94%b1">#&lt;/a>
&lt;/h2>
&lt;h3 id="システム設計や構成の理解">
 システム設計や構成の理解
 &lt;a class="anchor" href="#%e3%82%b7%e3%82%b9%e3%83%86%e3%83%a0%e8%a8%ad%e8%a8%88%e3%82%84%e6%a7%8b%e6%88%90%e3%81%ae%e7%90%86%e8%a7%a3">#&lt;/a>
&lt;/h3>
&lt;p>内部仕様を理解することで、脆弱性がシステムのどの部分に存在し、どのように悪用される可能性があるかをより正確に判断できます。例えば、SQLインジェクションの脆弱性が発見された場合、内部仕様を把握していれば、その脆弱性がどのデータベースに影響を与えるかを正確に判断ができます。&lt;/p>
&lt;h3 id="攻撃シナリオの理解">
 攻撃シナリオの理解
 &lt;a class="anchor" href="#%e6%94%bb%e6%92%83%e3%82%b7%e3%83%8a%e3%83%aa%e3%82%aa%e3%81%ae%e7%90%86%e8%a7%a3">#&lt;/a>
&lt;/h3>
&lt;p>内部仕様を把握していると、攻撃者がどのような経路をたどってシステムに侵入し、どのようにして脆弱性を悪用するかを具体的にシミュレーションできます。さらに、そのシナリオの実現可能性も評価することができます。&lt;/p>
&lt;h2 id="対応の優先度が上がる場合の例">
 対応の優先度が上がる場合の例
 &lt;a class="anchor" href="#%e5%af%be%e5%bf%9c%e3%81%ae%e5%84%aa%e5%85%88%e5%ba%a6%e3%81%8c%e4%b8%8a%e3%81%8c%e3%82%8b%e5%a0%b4%e5%90%88%e3%81%ae%e4%be%8b">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>脆弱性が発見されたシステムが、重要なシステムと接続されており、脆弱性の影響が拡大する可能性がある場合。&lt;/li>
&lt;li>自社の情報資産が特殊で、一般的な評価では低い評価になっていた場合。&lt;/li>
&lt;/ul>
&lt;h2 id="対応の優先度が下がる場合の例">
 対応の優先度が下がる場合の例
 &lt;a class="anchor" href="#%e5%af%be%e5%bf%9c%e3%81%ae%e5%84%aa%e5%85%88%e5%ba%a6%e3%81%8c%e4%b8%8b%e3%81%8c%e3%82%8b%e5%a0%b4%e5%90%88%e3%81%ae%e4%be%8b">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>攻撃には特定のIPアドレスからのアクセスなど、限定された条件が必要なため、攻撃の成功率が低い場合。&lt;/li>
&lt;li>システムにWAFなどの対策が導入されており、脆弱性を防ぐことができる場合。&lt;/li>
&lt;li>IDS／IPSによって攻撃が即座に検知され、即座に対応可能な場合。&lt;/li>
&lt;/ul></description></item><item><title>脆弱性の前提条件</title><link>https://webapppentestguidelines.github.io/TriageGuidelines/docs/chapter2/section2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://webapppentestguidelines.github.io/TriageGuidelines/docs/chapter2/section2/</guid><description>&lt;h1 id="脆弱性の前提条件">
 脆弱性の前提条件
 &lt;a class="anchor" href="#%e8%84%86%e5%bc%b1%e6%80%a7%e3%81%ae%e5%89%8d%e6%8f%90%e6%9d%a1%e4%bb%b6">#&lt;/a>
&lt;/h1>
&lt;p>脆弱性が報告される際、よく見られるのがソフトウェアのバージョンに基づく影響範囲です。しかし、自社のシステムの使用方法次第では、脆弱性情報に記載されているバージョンを使用していても、影響を受けない場合があります。&lt;/p>
&lt;p>例えば、脆弱性が特定のモジュールや設定に依存している場合、それらの条件が満たされていなければ影響を受けないことがあります。&lt;/p>
&lt;h2 id="ソフトウェアバージョン以外の前提条件の例">
 ソフトウェアバージョン以外の前提条件の例
 &lt;a class="anchor" href="#%e3%82%bd%e3%83%95%e3%83%88%e3%82%a6%e3%82%a7%e3%82%a2%e3%83%90%e3%83%bc%e3%82%b8%e3%83%a7%e3%83%b3%e4%bb%a5%e5%a4%96%e3%81%ae%e5%89%8d%e6%8f%90%e6%9d%a1%e4%bb%b6%e3%81%ae%e4%be%8b">#&lt;/a>
&lt;/h2>
&lt;p>具体的には、以下のようなケースが存在します。&lt;/p>
&lt;ul>
&lt;li>特定のモジュールをインストールしている場合にのみ影響がある
(多くのCVEで該当)&lt;/li>
&lt;li>特定の機能を利用/有効化している場合のみ影響がある
(例：Apache HTTP Serverでmod_proxyが有効な場合 等)&lt;/li>
&lt;li>特定の設定値をon/off、あるいは特定の値に設定している場合のみ影響がある
(例：log4jなどJavaベースのアプリにてJVMの特定の起動オプションを指定する場合 等)&lt;/li>
&lt;/ul>
&lt;h2 id="前提条件の確認方法の例">
 前提条件の確認方法の例
 &lt;a class="anchor" href="#%e5%89%8d%e6%8f%90%e6%9d%a1%e4%bb%b6%e3%81%ae%e7%a2%ba%e8%aa%8d%e6%96%b9%e6%b3%95%e3%81%ae%e4%be%8b">#&lt;/a>
&lt;/h2>
&lt;p>脆弱性の前提条件を把握するためには、次のような方法が考えられます。
使用しているライブラリなどのバージョン情報以外の情報を確認したり、参考サイトやベンダー情報を参照します。その上で、自社開発システムの場合などには、該当のソフトウェアの設計書やソースコードを調べる必要があります。&lt;/p>
&lt;h2 id="システムへの影響を見極めるために確認が必要なこと">
 システムへの影響を見極めるために確認が必要なこと
 &lt;a class="anchor" href="#%e3%82%b7%e3%82%b9%e3%83%86%e3%83%a0%e3%81%b8%e3%81%ae%e5%bd%b1%e9%9f%bf%e3%82%92%e8%a6%8b%e6%a5%b5%e3%82%81%e3%82%8b%e3%81%9f%e3%82%81%e3%81%ab%e7%a2%ba%e8%aa%8d%e3%81%8c%e5%bf%85%e8%a6%81%e3%81%aa%e3%81%93%e3%81%a8">#&lt;/a>
&lt;/h2>
&lt;p>脆弱性情報に加え、自社開発システムに関しても以下の項目を確認する必要があります。ただし、どの範囲まで確認するかは、脆弱性の特性によって異なるため、一概には言えません。&lt;/p>
&lt;ul>
&lt;li>システムの構成&lt;/li>
&lt;li>システムの内部仕様/外部仕様&lt;/li>
&lt;li>実際の設定値&lt;/li>
&lt;/ul>
&lt;p>これらの情報を確認することで、最も一般的な対応策である「ソフトウェアのバージョンアップ」に加え、機能の一時的な無効化など、他の柔軟な対応策を検討できるようになります。それにより、トリアージの優先順位付けがより柔軟に行えるようになります。
　(例：⁠regreSSHion(CVE-2024-6387)において、LoginGraceTimeの設定で緩和が可能 等)&lt;/p>
&lt;h2 id="注意">
 注意
 &lt;a class="anchor" href="#%e6%b3%a8%e6%84%8f">#&lt;/a>
&lt;/h2>
&lt;p>注意すべき点として、システムを調査する際仕様書を基に判断したものの、その仕様書が古く、実際のシステム環境と一致していない場合や、誤った確認方法を用いたために脆弱性が存在しているにもかかわらず、影響がないと判断してしまうケースがあります。
運用者のスキル・調査の方法などを踏まえて、「ソフトウェアのバージョンアップ」を優先するほうが安全であるケースがあるため、注意して判断を行ってください。&lt;/p></description></item><item><title>Exploitの流通状況</title><link>https://webapppentestguidelines.github.io/TriageGuidelines/docs/chapter2/section3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://webapppentestguidelines.github.io/TriageGuidelines/docs/chapter2/section3/</guid><description>&lt;h1 id="exploitの流通状況">
 Exploitの流通状況
 &lt;a class="anchor" href="#exploit%e3%81%ae%e6%b5%81%e9%80%9a%e7%8a%b6%e6%b3%81">#&lt;/a>
&lt;/h1>
&lt;p>脆弱性を悪用する攻撃コードの流通状況を把握することで、対応までの時間的猶予（緊急度）をより正確に判断できます。&lt;/p>
&lt;p>以下のExploit流通状況の中では、「攻撃事例がある」場合が最も緊急性が高く、即座に対応すべき脆弱性と判断できます。&lt;/p>
&lt;ul>
&lt;li>攻撃事例がある&lt;/li>
&lt;li>脆弱性の実証コード（PoC）が出回っている
（PoCが正しいものであるかの確認が必要）&lt;/li>
&lt;li>理論的に脆弱なだけで実証されていない&lt;/li>
&lt;/ul>
&lt;blockquote class="book-hint info">
&lt;p>&lt;strong>補足&lt;/strong>&lt;br>
Exploitの流通状況だけで対策の優先順位を決定することは推奨されません。即座に攻撃される可能性があるのか、攻撃手段が流通してしまっているのかを元に判断することを意図しています。&lt;/p>
&lt;/blockquote>
&lt;h2 id="どのように情報収集するのか">
 どのように情報収集するのか
 &lt;a class="anchor" href="#%e3%81%a9%e3%81%ae%e3%82%88%e3%81%86%e3%81%ab%e6%83%85%e5%a0%b1%e5%8f%8e%e9%9b%86%e3%81%99%e3%82%8b%e3%81%ae%e3%81%8b">#&lt;/a>
&lt;/h2>
&lt;p>悪用されやすかったり、利用者が多いプロダクトの脆弱性については、ニュースサイトや第1章で紹介した脆弱性情報サイト（ &lt;a href="https://www.jpcert.or.jp/">JPCERT/CC&lt;/a>、&lt;a href="https://jvn.jp/">JVN&lt;/a>など）から情報が得られやすいです。&lt;br>
しかし、注目される脆弱性は限られているため、使用しているプロダクトに関連する攻撃コードの流通状況については、常に注意して情報を収集する必要があります。&lt;/p>
&lt;h3 id="実証コードpocの掲載サイト">
 実証コード（PoC）の掲載サイト
 &lt;a class="anchor" href="#%e5%ae%9f%e8%a8%bc%e3%82%b3%e3%83%bc%e3%83%89poc%e3%81%ae%e6%8e%b2%e8%bc%89%e3%82%b5%e3%82%a4%e3%83%88">#&lt;/a>
&lt;/h3>
&lt;p>脆弱性の実証コード（PoC: Proof of Concept）の掲載サイトや脆弱性スキャンツールベンダーのサイトなどから情報が得られやすいです。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://www.exploit-db.com/">ExploitDB&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.rapid7.com/db/?q=&amp;amp;type=metasploit">Vulnerability &amp;amp; Exploit Database&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.vulnerability-lab.com/index.php">vulnerability-lab&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://packetstormsecurity.com/files/tags/exploit/">Packet Storm Security&lt;/a>&lt;/li>
&lt;/ul>
&lt;h3 id="悪用された脆弱性リスト">
 悪用された脆弱性リスト
 &lt;a class="anchor" href="#%e6%82%aa%e7%94%a8%e3%81%95%e3%82%8c%e3%81%9f%e8%84%86%e5%bc%b1%e6%80%a7%e3%83%aa%e3%82%b9%e3%83%88">#&lt;/a>
&lt;/h3>
&lt;p>米国CISA（Cybersecurity＆Infrastructure Security Agency）が提供する、実際に悪用が確認された脆弱性リストである&lt;a href="https://www.cisa.gov/known-exploited-vulnerabilities-catalog">KEVカタログ&lt;/a>（Known Exploited Vulnerabilities catalog）を参照することも有効です。ただし、脆弱性が公開された直後の場合、悪用がまだ確認されていないこともあるため、対応の優先順位を決定する際には注意が必要です。&lt;br>
継続的にKEVカタログから情報収集する場合は、情報更新時にお知らせを受領するための登録フォームがあります。&lt;/p>
&lt;h3 id="検索">
 検索
 &lt;a class="anchor" href="#%e6%a4%9c%e7%b4%a2">#&lt;/a>
&lt;/h3>
&lt;p>Web検索や脆弱性情報管理ツールでExploitの流通状況を調べる手段もあります。&lt;br>
検索クエリに「CVE番号」や「CVE番号　PoC」、「CVE番号　&amp;ldquo;in the wild&amp;rdquo;」などを設定しての検索は有効です。ただし、誤った情報や偽PoC、偽攻撃ツールも存在しているため、信頼できる情報であるのか慎重な判断が必要です。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://flashpoint.io/ignite/vulnerability-intelligence/">Flashpoint Vulnerability Intelligence - VulnDB&lt;/a>（有償）&lt;/li>
&lt;/ul>
&lt;h2 id="自社開発のアプリケーション等の場合">
 自社開発のアプリケーション等の場合
 &lt;a class="anchor" href="#%e8%87%aa%e7%a4%be%e9%96%8b%e7%99%ba%e3%81%ae%e3%82%a2%e3%83%97%e3%83%aa%e3%82%b1%e3%83%bc%e3%82%b7%e3%83%a7%e3%83%b3%e7%ad%89%e3%81%ae%e5%a0%b4%e5%90%88">#&lt;/a>
&lt;/h2>
&lt;p>自社開発のアプリケーションは一般的なプロダクトではないため、実証コード掲載サイトやKEVカタログを参照しても、Exploitの流通状況が把握できないことが多々あります。&lt;br>
「脆弱性の前提条件」の項目や脆弱性診断を実施したベンダーからの報告内容を基に、同様の攻撃手法が実行される可能性やその影響について調査する必要があります。&lt;/p></description></item><item><title>Exploitの実現性</title><link>https://webapppentestguidelines.github.io/TriageGuidelines/docs/chapter2/section4/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://webapppentestguidelines.github.io/TriageGuidelines/docs/chapter2/section4/</guid><description>&lt;h1 id="exploitの実現性">
 Exploitの実現性
 &lt;a class="anchor" href="#exploit%e3%81%ae%e5%ae%9f%e7%8f%be%e6%80%a7">#&lt;/a>
&lt;/h1>
&lt;p>脆弱性が存在しても、攻撃を実行できる人の数やスキルによって、その危険度は変わることがあります。&lt;/p>
&lt;h2 id="対象システムへのアクセス">
 対象システムへのアクセス
 &lt;a class="anchor" href="#%e5%af%be%e8%b1%a1%e3%82%b7%e3%82%b9%e3%83%86%e3%83%a0%e3%81%b8%e3%81%ae%e3%82%a2%e3%82%af%e3%82%bb%e3%82%b9">#&lt;/a>
&lt;/h2>
&lt;p>CVSSの攻撃元区分（AV: Attack Vector）は、脆弱性がどのような経路で攻撃可能かを評価しており、「ネットワーク」「隣接」「ローカル」「物理」といった選択肢があります。&lt;br>
物理アクセスが必要な脆弱性でも、自動販売機のように誰でもアクセス可能な場所にあるシステムと、防犯ゲートで厳重に守られたデータセンターの奥に設置されたシステムでは、攻撃の実現性が大きく異なります。&lt;br>
正当な権限を持った人による内部犯行を脅威として想定するかによっても異なります。&lt;/p>
&lt;h2 id="複数の脆弱性の組み合わせ">
 複数の脆弱性の組み合わせ
 &lt;a class="anchor" href="#%e8%a4%87%e6%95%b0%e3%81%ae%e8%84%86%e5%bc%b1%e6%80%a7%e3%81%ae%e7%b5%84%e3%81%bf%e5%90%88%e3%82%8f%e3%81%9b">#&lt;/a>
&lt;/h2>
&lt;p>Webアプリケーションでログイン時にセッションIDを変更しない場合、セッションフィクセイション脆弱性が報告されることがあります。しかし、この挙動だけで即座に被害が発生するわけではありません。攻撃者が指定したセッションIDを、何らかの手段で被害者に強制的に使用させる別の脆弱性が必要です。&lt;br>
例えば、セッションアダプション、クッキーモンスター、クロスサイトスクリプティングなどが該当します。これらの脆弱性が適切に対応されている場合、危険度は低くなるでしょう。&lt;/p>
&lt;h2 id="exploitの開発難易度">
 Exploitの開発難易度
 &lt;a class="anchor" href="#exploit%e3%81%ae%e9%96%8b%e7%99%ba%e9%9b%a3%e6%98%93%e5%ba%a6">#&lt;/a>
&lt;/h2>
&lt;p>例えばSQLインジェクション脆弱性で、&lt;code>'and'A'='A&lt;/code>といったチートシートに載っている簡単なパターンや、脆弱性診断ツールで使用される典型的な攻撃パターンが成功する脆弱性が報告された場合、技術レベルの低い攻撃者でも攻撃可能である可能性が高いといえます。&lt;br>
一方で、使える文字が限られていたり、WAFが設置されているなどで、それらの制限を回避する必要がある場合、それを行える高度な技術を持った攻撃者のみが脅威となります。対象となるサーバーソフトウェアやブラウザOSなどに対する深い知識が必要な場合も同様です。&lt;/p>
&lt;h2 id="攻撃の難易度の判断">
 攻撃の難易度の判断
 &lt;a class="anchor" href="#%e6%94%bb%e6%92%83%e3%81%ae%e9%9b%a3%e6%98%93%e5%ba%a6%e3%81%ae%e5%88%a4%e6%96%ad">#&lt;/a>
&lt;/h2>
&lt;p>攻撃難易度を判断するためには、脆弱性や攻撃手法に対する専門的な知識が必要です。&lt;br>
まずは脆弱性診断の報告書などを確認し、実害につながることが実証されているか、PoC(Proof of Concept: 概念実証)が記載されているかどうかを確認してください。&lt;br>
PoCが示されていない場合や、脆弱性の可能性のみが示唆されていて現実的な被害に結びつくか不明な場合には、自身でExploitを作成してみる必要があるかもしれません。&lt;br>
診断ベンダーによっては、実際の攻撃の可否までは検証せず、不正な挙動を見つけたという段階で報告してくる場合があります（被害につながるかわからないけれどもとりあえずすべて修正するつもりであれば、この報告方針の方が有用です）。&lt;/p>
&lt;p>なお、脅威が小さいと判断した場合でも油断は禁物です。Exploitの流通状況で述べたように、&lt;strong>ExploitやPoC、前提情報が公開されてしまった瞬間に状況は一変します。&lt;/strong>&lt;br>
Exploitの難易度は、脆弱性が発覚し、Exploitが公開されないことを祈っている初期段階での判断基準として利用するにとどめ、長期的な判断基準として利用することは避けた方が良いでしょう。&lt;/p></description></item></channel></rss>