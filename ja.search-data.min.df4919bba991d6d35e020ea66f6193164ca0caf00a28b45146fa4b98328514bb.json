[{"id":0,"href":"/TriageGuidelines/docs/chapter3/section1/","title":"CVSS","section":"3章 トリアージに利用できるフレームワーク","content":" CVSS # CVSS（Common Vulnerability Scoring System）は、脆弱性の深刻度を数値化するためのフレームワークであり、ベンダーに依存しない共通の評価方法を提供しています。脆弱性の深刻度を定量的に評価することで、リスクを理解することができより精度の高いトリアージが可能となります。\nCVSSにはバージョンがあり、ここではv3.1の一部を抜粋して紹介します。CVSSv.3.1の詳細は「Common Vulnerability Scoring System v3.1: Specification Document」をご覧ください。\nCVSSのスコアの種類 # CVSSは、次の3つの基準で脆弱性を評価します。\n３つの基準すべてで評価する必要はありませんが、多くの基準で評価することでより精度の高いトリアージを行うことが可能となります。基本評価基準を基本とし、評価の目的や組織の状況に応じて適切な基準を選択し利用してください。\n基本評価基準 (Base Metrics):\n脆弱性そのものの特性を評価する基準です。情報システムに求められる3つのセキュリティ特性、「機密性（Confidentiality Impact）」、「完全性(Integrity Impact）」、「可用性(Availability Impact）」に対する影響を、ネットワークから攻撃可能かどうかといった基準で評価し、CVSS基本値(Base Score)を算出します。このスコアは時間の経過や利用環境の異なりによって変化しません。\nCVSS基本値は以下の8つの観点で算出します。\n攻撃元区分(AV：Attack Vector)\n脆弱性のあるコンポーネントをどこから攻撃可能であるかを「ネットワーク」、「隣接」、「ローカル」または「物理」のいずれかで評価します。 攻撃条件の複雑さ(AC：Attack Complexity)\n脆弱性のあるコンポーネントを攻撃する際に必要な条件の複雑さを「低」または「高」のいずれかで評価します。 必要な特権レベル(PR：Privileges Required)\n脆弱性のあるコンポーネントを攻撃する際に必要な特権のレベルを「不要」、「低」または「高」のいずれかで評価します。 ユーザ関与レベル(UI：User Interaction)\n脆弱性のあるコンポーネントを攻撃する際に必要なユーザ関与レベルを「低」または「高」のいずれかで評価します。 スコープ(S：Scope)\n脆弱性のあるコンポーネントへの攻撃による影響範囲を「変更なし」または「変更あり」のいずれかで評価します。 機密性への影響(C：Confidentiality Impact)\n脆弱性を攻撃された際に、対象とする影響想定範囲の情報が漏えいする可能性を「なし」、「低」または「高」のいずれかで評価します。 完全性への影響(I：Integrity Impact)\n脆弱性を攻撃された際に、対象とする影響想定範囲の情報が改ざんされる可能性を「なし」、「低」または「高」のいずれかで評価します。 可用性への影響(A：Availability Impact)\n脆弱性を攻撃された際に、対象とする影響想定範囲の業務が遅延・停止する可能性を「なし」、「低」または「高」のいずれかで評価します。 現状評価基準 (Temporal Metrics):\n脆弱性の現在の深刻度を評価する基準です。攻撃コードの出現有無や対策情報が利用可能であるかといった基準で評価し、CVSS現状値(Temporal Score)を算出します。このスコアは脆弱性への対応状況に応じ、時間が経過すると変化します。 CVSS現状値はCVSS基本値の項目に以下の3つの観点を加え、算出します。\n攻撃される可能性(E：Exploit Code Maturity)\n攻撃コードや攻撃手法が実際に利用可能であるかを「未評価」、「容易に攻撃可能」、「攻撃可能」、「実証可能」または「未実証」のいずれかで評価します。 利用可能な対策のレベル(RL：Remediation Level)\n脆弱性の対策がどの程度利用可能であるかを「未評価」、「なし」、「非公式」、「暫定」または「正式」のいずれかで評価します。 脆弱性情報の信頼性(RC：Report Confidence)\n脆弱性に関する情報の信頼性を「未評価」、「確認済」、「未確証」、「未確認」または「正式」のいずれかで評価します。 環境評価基準 (Environmental Metrics):\n利用環境も含め、最終的な脆弱性の深刻度を評価する基準です。攻撃を受けた場合の二次的な被害の大きさや、組織での対象製品の使用状況といった基準で評価し、 CVSS環境値 (Environmental Score) を算出します。このスコアは脆弱性に対して想定される脅威に応じ、変化します。\nCVSS環境値の計算には、CVSS現状値の要素に加えて、環境特有の要素として機密性、完全性、可用性の重要度や、攻撃元区分、攻撃条件の複雑さ、必要な特権レベル、ユーザー関与レベル、スコープの修正値が含まれます。これにより、環境値は利用状況固有のセキュリティ要件やリスク許容度が反映されます。\nスコアの計算 # それぞれのスコアは0.0 ~ 10.0で数値化されます。\n公開されている計算式をもとに計算することも可能ですが、公式が提供しているCommon Vulnerability Scoring System Version 3.1 Calculatorを使うことで簡単に計算が可能です。\nCVSSのメリット # 優先順位が明確になる\n最終的に数値としてスコアが算出されるため、対応すべき脆弱性の先順位が明確になります。 標準的に利用されている\n最も広く使われている脆弱性評価方法です。各種ベンダーが公開する情報にもCVSSスコアが併記されていることが多く、その値を使うことでそのままトリアージが可能です。 "},{"id":1,"href":"/TriageGuidelines/docs/columns/columns1/","title":"NVDの更新停滞","section":"コラム","content":" NVDの更新停滞 # 2024年2月頃、NVD(National Vulnerability Database)の更新が突如停滞しました。\nNVDの更新が停滞した背景には、脆弱性報告の急増と対応スタッフの不足が主な原因とされています。\nNVDの脆弱性情報は多くの企業やセキュリティ製品にとって重要な情報源であり、更新の停滞は重大な問題を引き起こしています。\nNISTはこの問題に対応するため、コンソーシアムを設立し、新しい体制の構築を進めていると発表しましたが、具体的な開始時期は公表されていません。（2024年11月現在）\nコンソーシアムが設立されるまでの間、NVDの代替として他の脆弱性データベースの利用や、3章で紹介しているSSVC、EPSS、KEVカタログなどCVSS以外の評価指標の採用を検討する必要があるでしょう。\n"},{"id":2,"href":"/TriageGuidelines/docs/prologue/","title":"はじめに","section":"Docs","content":" はじめに # 前文 # 本ドキュメントは「組織が脆弱性に適切に対応することを目的として、脆弱性診断を実施した際に提供された報告書に記載された脆弱性対応の優先順位付け（トリアージ）を行うために、その組織に適したトリアージガイドラインを作成するための手引き」です。\n組織においてセキュリティ対応を行うためのリソースは限りあるものです。そのため、発見されたすべての脆弱性に対応できるとは限りません。限りあるリソースを最大効率で活用するためには、適切に優先順位を付けて対応していく必要があります。\n適切なトリアージを行うためには明確な判断基準が必要です。 # もともと「トリアージ（Triage）」というのは、大事故や大規模災害などで多数の傷病者がいる状況において、傷病の緊急度や重症度に応じて優先度を決めることです。災害医療では標準化が図られていて、最大効率を得るためにさまざまな基準が決められています。\nサイバーセキュリティの分野でも、インシデントハンドリングにおいてトリアージを適切に行うためには、あらかじめトリアージのための判断基準を明確に定めておく必要があります。\nただ、トリアージの判断基準は「守るべきものは何か？」という基本的な組織の活動ポリシーによって変わるため、組織ごとに適切なトリアージガイドラインは異なります。\n脆弱性の取扱はあなた自身で判断する必要があります。 # 脆弱性診断実施時の報告書には、発見された脆弱性の「リスクの大きさ」についての記載があります。高・中・低の表記や数値によってリスクの大きさが示されていますが、その記載はあくまで脆弱性そのものの脅威の大きさです。\nどういうシステムに存在する脆弱性なのか、そのシステムはどのくらい重要なのか、攻撃コードは公開されているのか、すでに攻撃は起きているのか、といった状況や環境によっても対応の優先順位は変わってきます。\nそのため、脆弱性診断で発見された脆弱性をどう取り扱うのか、外部から報告された脆弱性をどう取り扱うのかは、あなたの組織自身で判断する必要があります。\n本ドキュメントは、トリアージについてこれから取り組むという組織や、ある程度取り組んでいるが自社に明確なガイドラインがない、見直したいといった組織が、その組織に適したトリアージガイドラインを作成して頂くことを目的としています。\nなぜ脆弱性のトリアージが必要なのか # 顕在化した脆弱性のすべてを修正できるのが理想ですが、対応するリソース（人員、インフラ、予算）は無限ではありません。また、すべてを修正しようとして、その検討に時間がかかりすぎ、その結果早期に修正すべきものまでが後回しになってしまうことがあります。\nそのため、脆弱性のトリアージ（対応の優先度付け）というのは非常に重要なものとなります。\nなお、トリアージを行う目的は対応のための単なる優先順位付けだけではありません。それは、脆弱性診断で報告を受けた脆弱性やベンダーから公表された脆弱性のすべてが対応すべきものとは限らないからです。\n脆弱性対応の判断フロー # 脆弱性の認知/検知時の対応判断は、以下のフローのように、「①実際に脆弱性の影響を受けるのか、その範囲はどの程度なのかを分析」し、「②脆弱性の危険度や対象の重要度などからリスクを評価」し、「③対象の脆弱性の対応方針」を決定します。 各要素について対応判断毎に検討するよりも、対応方基本方針（ガイドライン）として、評価や判断時の基準を決めておくことで、脆弱性認知/検知時に円滑に対応することが可能となります。\nflowchart LR S(脆弱性の認知) --\u003e B[①影響分析] --\u003e C[②リスク評価] --\u003e D[\"③対応方針決定(記録)\"] --\u003e E(対応フロー全体に戻る) 例えば、報告を受けた脆弱性が問題のあるソフトウェアの利用だった場合に、そのソフトウェアの設定によっては問題とはならない場合があります。また、あくまでも脆弱性が存在する可能性を報告されていただけで、実際には影響がない可能性もあります。\n対処すべきものであるかどうかを見極めた上で、その優先度を決める（トリアージ）必要があります。この見極めた結果、リスクの高い脆弱性は優先的に対応し、リスクの低い脆弱性は後回しにします。そのリスクが高い、低いというのをどのように判断するのか。また、どのくらい高ければどのくらい急がないといけないのか。このような判断の一助となる基準を決めておくことが大切です。システムが扱う情報、機能、規模などシステムの重要度が各組織で異なるため、それに応じて各組織独自の基準を作っていく必要があります。\nなお、対処すべきかの見極めが簡単にできるものと調査が必要なものがあります。そして、その調査にもどのくらい時間がかかるのかは、その脆弱性や対応する会社の組織体制によって異なります。この辺りは対応部門の状況に応じて考える必要があるでしょう。\n不要な対応はしないことも決められるため、トータルコストが抑えられますし、基準が決まっていることで上位者への報告コストも抑えられます。何かあったときによりどころとなるすでに社内で承認がとられている基準があるのは担当者の助けとなります。\nただし、トリアージはひとまずの優先順位を決めるためのものです。\n対応にかけられるリソース、コスト、スケジュールなど諸々の事情によって、最終的にはトリアージで決めた優先順位通りに対応しないという経営判断を下す場合がある点に留意してください。第４章に判断事例を挙げていますので、経営判断の参考としてください。\nトリアージガイドライン運用のためのフロー # 本ドキュメントを参考にトリアージガイドラインを作成する際のフローを記載します。\n最低限のトリアージ体制を作る # これから自組織の脆弱性トリアージガイドラインを作成される方は、まず第１章を参考にしてガイドラインを作成し、最低限のトリアージを迅速に行える体制を作ることを推奨しています。\n第１章では、対応基本方針の策定について説明しています。この段階でのトリアージ基準は、高い専門知識を持っていない人でも判断できる程度の基準にとどめています。 それにより迅速に優先順位付けができるようになり、また優先度について関係者全体の意識をある程度揃えることができます。 ただし簡易的な判断基準であるため、攻撃による実際のリスクとの乖離がある可能性があります。\nそのため、自組織に適したトリアージガイドラインを作るためには、運用を行いながらガイドラインを見直していく必要があります。 また、部署やプロジェクトごとにトリアージの判断基準などが異なることもあります。その場合には、プロジェクトごとにトリアージガイドラインを作ることも検討してください。\nトリアージの精度を向上させる # ガイドラインを利用した際に気付いた改善点の反映やトリアージの精度向上に取り組まれる際には、第２章以降を参考にしてください。\n第２章では、高度な専門知識をもった人がリスク判定の精度を上げるための手法について説明しています。 第３章では、詳細な判断に利用できそうなフレームワークをいくつか紹介しています。判断材料を集めるために多少の時間がかかる場合もありますので、トリアージのために時間的余裕がある場合を想定したガイドラインを作成していきたいという場合に活用してください。\nこのようにガイドラインは一度作成したものを使い続けるのではなく、脆弱性対応が完了した後に、トリアージ時の改善点（反省点）を踏まえ、アップデートすることを推奨します。\nflowchart LR op1[作成目的の確認]; op2[\"ガイドライン作成 （各項目の検討/改善点の反映）\"]; op3[組織内での合意]; op4[トリアージ実施]; op5[脆弱性対応 実施後の振返り]; op1--\u003eop2--\u003eop3--\u003eop4--\u003eop5; op5--\u003eop2; "},{"id":3,"href":"/TriageGuidelines/docs/chapter1/section1/","title":"関係者の役割と責任を明確にする","section":"1章 トリアージガイドラインの作成","content":" 関係者の役割と責任を明確にする # 脆弱性を対応するにあたり、ガイドラインを作成する立場以外にもシステム担当者や事業責任者、CISOなど様々な人物やチームが関与します。 各関係者の役割が明確でない場合、脆弱性対応時の判断に遅れが生じたり、情報共有や対応の連携に手間取る場合があります。トリアージを迅速に行えるように各関係者の役割と責任範囲を明確にしておきましょう。\n役割と責任定義の例\n1. CISO CISOは、当社規程の定めに従い任命されます。CISOは、当社が開発・運用するすべてのシステムについて、リスク管理の責任を負います。インシデント対応や準備に対してかかる費用についての全決裁権を持つものとします。 2. セキュリティ統括室 セキュリティ統括室は、各事業部門のシステムで発覚した脆弱性や対応状況について、管理・監督する責任を負います。 本ガイドラインで定めた対応方針とは異なる対応を行う必要がある場合、セキュリティ統括室が判断・承認するものとします。 3. システム管理責任者 マネージャ以上の役職者とし、対象システムに応じて所管部門から選出します。 対象システムの管理業務の推進と維持管理に必要な実務全般の判断・承認の責任を負います。 システム管理責任者は、本ガイドラインに沿ってトリアージを行い、脆弱性対応を行い、結果及び対応状況をセキュリティ統括室に報告する責任を負います。 4. システム管理担当者 システム管理責任者の指示のもと、対象システムの管理業務の推進と維持管理に必要な実務作業を担当します。 "},{"id":4,"href":"/TriageGuidelines/docs/chapter4/section1/","title":"修正コストについて","section":"4章 トリアージ後の対応","content":" 修正コストについて # 実際にトリアージした脆弱性を対策しようとする際に、脆弱性を修正する際のコストがどの程度であるかを把握する必要があるでしょう。\n脆弱性を対策するためにはどのような作業が必要となるかや発生する影響などを確認しましょう。\n部分的なソースコードの修正のみ 一部の設定変更で対応可能 バージョンアップやパッチ適用が必要 大規模な設計見直しが必要 サービスの停止を伴う なお、諸事情によって脆弱性の根本対策が難しい場合があります。\n例えば、ライブラリの依存関係が動作に影響を及ぼす場合には、バージョンアップでの対策が難しい場合が考えられます。\n上記のように脆弱性の根本対策が困難である場合には、後述する例外的対策の実施を検討しましょう。\nまた、修正コストを算出する場合には以下のような観点も考慮する必要があります。\n社内リソースで対応可能か、外注費用が必要となるか 修正後のテストにて発生するコストについて もし、修正コストが膨大にかかりそうなことが判明した場合には、対策をどのように進めるべきかについて別途検討する必要があるでしょう。\n致命的な脆弱性の場合には、修正コストがかかったとしても対応を実施しなければならない場合もあります。\nその際には、対象の脆弱性の影響が事業にどの程度影響を及ぼすか判断する必要があります。\nシステム的な影響以外にも、企業のブランドイメージや評判への影響なども考慮すべきでしょう。\n監督官庁・業界団体のガイドラインへの違反による影響 評判、ブランド、イメージの悪化による影響 重要な取引先の損失 ブランドの失墜 脆弱性の修正コストが、経済的な損失を大きく上回る場合は、脆弱性を修正しないビジネス上の決断を行う場合もあります。\nリスクの受容や回避など重要なリスクの対応方針の決定は、経営層が判断する必要があります。\n修正コストや経済的な影響の判断例 脆弱性の修正コストが過大な場合、保険的な対策を行い経済的な損失を抑えリスクの一部を低減する 経済的な損失が小さく、脆弱性の修正コストが経済的な損失を上回る場合リスクを許容する 脆弱性がある機能やシステムのみ停止しリスクを回避する 影響は大きいが発生確率が低い場合、保険に入りリスクを移転する "},{"id":5,"href":"/TriageGuidelines/docs/chapter2/section1/","title":"脆弱性の影響範囲","section":"2章 トリアージの精度向上","content":" 脆弱性の影響範囲 # 脆弱性がシステムに与える影響範囲を評価し、その精度を向上させます。たとえサービスが一般公開されていても、脆弱性の影響範囲が限定されることがあります。例えば、古いブラウザを利用しているユーザーなど、限定された利用者にのみ影響する脆弱性などです。 このような場合、影響範囲が限定されるため、対応の優先度を下げることも可能です。 これらの判断を行うためには、システムの内部仕様を理解することが重要になります。\nシステムの内部仕様の理解が必要な理由 # システム設計や構成の理解 # 内部仕様を理解することで、脆弱性がシステムのどの部分に存在し、どのように悪用される可能性があるかをより正確に判断できます。例えば、SQLインジェクションの脆弱性が発見された場合、内部仕様を把握していれば、その脆弱性がどのデータベースに影響を与えるかを正確に判断ができます。\n攻撃シナリオの理解 # 内部仕様を把握していると、攻撃者がどのような経路をたどってシステムに侵入し、どのようにして脆弱性を悪用するかを具体的にシミュレーションできます。さらに、そのシナリオの実現可能性も評価することができます。\n対応の優先度が上がる場合の例 # 脆弱性が発見されたシステムが、重要なシステムと接続されており、脆弱性の影響が拡大する可能性がある場合。 自社の情報資産が特殊で、一般的な評価では低い評価になっていた場合。 対応の優先度が下がる場合の例 # 攻撃には特定のIPアドレスからのアクセスなど、限定された条件が必要なため、攻撃の成功率が低い場合。 システムにWAFなどの対策が導入されており、脆弱性を防ぐことができる場合。 IDS／IPSによって攻撃が即座に検知され、即座に対応可能な場合。 "},{"id":6,"href":"/TriageGuidelines/docs/chapter5/section1/","title":"脆弱性対応フローが明確化されていなかった組織事例","section":"5章 事例","content":" 脆弱性対応フローが明確化されていなかった組織事例 # 商社系のA社では、小規模なシステムを管理していますが、脆弱性対応について明確なポリシーはありませんでした。ニュースなどで報道されるものについて対応する、という状況でした。\n自社のサイバーセキュリティ対策を強化することになり、脆弱性トリアージや対応について判断基準を決め、対応の標準化を行うことを決定しました。\nまず、対応の全体像を決定しました。1章の「脆弱性対応の判断フロー」において、どのタイミングで何を行うのか、その際の判断根拠となる社内規定等はあるのか/なければ整備する必要があるのかを検討しました。\n次に、脆弱性対応の優先度判断となる脆弱性トリアージ基準を策定しました。脆弱性トリアージを組織として行うことに慣れていないため、まずはCVSS BaseScoreを基準に設定しました。まずは、複雑ではなく単純化し、運用に慣れてきたら判断基準を変更していくという戦略です。\n9.5以上(重大度:Critical)：1週間程度以内で対応し、場合によっては業務を止める 8.0以上(重大度:High)：なるべく早く対応する（2週間程度以内） 8.0未満：早急に適用する必要はないが、定期メンテナンス等で適用を検討する その後、脆弱性対応に対する基準を策定しました。例えば更新プログラムを適用することを想定した場合、どのようなプロセスが必要なのか、その為の準備はできているかなどを確認し、整備しました。テスト環境が本番と同じ状態か、更新後の稼働テストは何を確認するのか、等です。\nそして、脆弱性情報の取得方法や、対象システムの現状把握を行いました。1章の「脆弱性対応の判断フロー」にもある通り、脆弱性の認知と影響分析が必要です。\nまずは対象システムの構成を把握し、利用しているソフトウェアの棚卸を行いました。これにより、脆弱性を把握すべきソフトウェアが特定され、情報収集がやりやすくなります。また、これらを自動化するために、脆弱性管理ソフトウェアを入れました。\nこれらにより、脆弱性認知速度が上がり、より早く対応が必要かを判断することができるようになりました。今までは被害影響が出たニュースを基に対応していましたが、脆弱性情報が出たタイミングで自システムが対象になるのかを判断できる状況になりました。\n上記運用をしばらく続けた中で、\u0026ldquo;対応すべきと判断される脆弱性の数\u0026quot;が多いと感じる点が、課題となっています。これは脆弱性トリアージでCVSS BaseScoreのみを利用しており、実際のリスクでの判断とはなっていない点が関連しています。今後、攻撃される可能性の評価として、EPSSやKEVカタログなどを取り入れることで、トリアージ基準を脆弱性自体の危険度から事業へのリスクに変えていく方針としています。\n今回の事例では、以下が言えると思います。\nまずは小さく始める 脆弱性トリアージでは、最初から複雑な基準を盛り込むと、破綻する可能性があります 理想論は一旦置いておき、「現実に対応できる/しきれる 基準」を設定します 実際に脆弱性トリアージを行って、課題を感じたら変更していく 課題を感じた時点で、現状のフローや基準を見直し、自組織の体力に合わせて調整することが望ましいと考えられます 状況により、人員の増強やソフトウェアの導入も検討が必要です "},{"id":7,"href":"/TriageGuidelines/docs/chapter1/","title":"1章 トリアージガイドラインの作成","section":"Docs","content":" 1章 トリアージガイドラインの作成 # 本ドキュメントの別紙として、トリアージガイドラインのテンプレートを作成しています。これはトリアージガイドラインの一例であって、あなたの組織にそのまま適用できるものではないはずです。本章では、どのような観点でテンプレートをカスタマイズし、あなたの組織で利用しやすいトリアージガイドラインを作成すればよいか説明します。\n本章の目的 # 本章では「脆弱性の影響分析」、「リスク判定基準」、「対応の要否と期限を決める」といった対応基本方針を策定することで、迅速に最低限のトリアージが可能な体制を構築することを目的としています。\n本章で作成するトリアージガイドラインは以下の特徴を持ちます。\n脆弱性やリスク評価に関する専門知識がなくても、素早くトリアージを行うことができる 主観的な判断が入らず、誰がトリアージしても同じ結果となる 攻撃コードの存在の有無などによって、実際に脅威が発生するリスクと乖離する可能性がある 素早くトリアージを行うことができる反面、対応しなければならない脆弱性が多くなり、対応が過剰になる可能性がある "},{"id":8,"href":"/TriageGuidelines/docs/chapter3/section2/","title":"SSVC","section":"3章 トリアージに利用できるフレームワーク","content":" SSVC # SSVC（Stakeholder-Specific Vulnerability Categorization）は、脆弱性管理を目的とした決定木モデルに基づくフレームワークです。デプロイヤー、サプライヤー、コーディネーターといった各ステークホルダーに個別の決定木を提供し、脆弱性対応の優先順位を決定します。\n従来のCVSSは、脆弱性の深刻度を一律の数値で評価しますが、個々の組織の特性や状況に応じた対応方針を決定するには不十分な場合があります。\nSSVCはこの課題を解決し、組織の特性やニーズに応じた具体的な対応方針を導き出すために設計されています。\nステークホルダーと決定木 # SSVCでは、次のステークホルダーに対して特定の決定木が用意されています。これにしたがって、脆弱性対応の優先度を決定します。\nデプロイヤー（Deployer）：ソフトウェアパッケージを利用して開発を行う組織 サプライヤー（Supplier）：ソフトウェアベンダーやパッチを提供する組織 コーディネーター（Coordinator）：脆弱性情報を統制する組織（例：CSIRT） 決定木は、複数の条件分岐からなるツリー形式で表現され、ユーザーが設問に答えることで最終的な判断が導き出されます。 決定木は複数の決定ポイント（Decision Point）で構成され、各ポイントでの選択肢に基づき、最終的な脆弱性対応の優先度（Track、Track*、Attend、Act）が決まります。\n決定ポイントは以下の5つです。\nExploitation：攻撃コードの公開状況や悪用の程度 Exposure：脆弱性が外部からアクセス可能かどうか Technical Impact：脆弱性の技術的な影響度 Mission Impact：組織のミッション遂行への影響度 Safety Impact：安全への影響度 最終的な優先度は、以下の4種類で示されます。\nTrack：監視を継続する Track＊：監視を継続し、特定の条件が満たされた場合に次のアクションを考慮する Attend：注意を払い、対応の準備を始める Act：即時に対応行動を取る SSVCの適切な決定木を選択する際には、ステークホルダーの役割、組織の特性とニーズ、具体的な判断条件、そして組織の規模と運用体制を考慮する必要があります。\nSSVCのメリット # 環境を考慮した評価\nSSVCは、従来のCVSSのような一律のスコアリングシステムとは異なり、組織固有の状況（使用環境、ビジネスへの影響など）を考慮して評価します。これにより、組織にとって最も重要な脆弱性に優先的に対応できます。\n自動化による効率化\nSSVCは、自動化が可能であり、以下のプロセスを通じて効率化を促進します。 これにより、脆弱性の検出から対応までの時間を大幅に短縮し、人的ミスの削減にもつながります。\n脆弱性スキャナと連携して検出された脆弱性を自動的にSSVCの決定木に入力する 脅威インテリジェンスフィードと連携し、最新の攻撃トレンドを評価に反映する チケットシステムと連携し、優先度に基づいて自動的にタスクを割り当てる 柔軟に適用できること\nSSVCは、組織の規模や特性に合わせてカスタマイズが可能であり、特定の業界やニーズに対応させることができます。 これにより、一般的な脆弱性管理手法が持つ一律なアプローチから脱却し、より効果的なリスク管理が可能になります。 "},{"id":9,"href":"/TriageGuidelines/docs/chapter5/section2/","title":"ビジネスインパクトを考慮した結果優先度が下がった事例","section":"5章 事例","content":" ビジネスインパクトを考慮した結果優先度が下がった事例 # トリアージ対象の脆弱性：CVE-2022-3080 # CVE-2022-3080はBIND 9と呼ばれるDNSサーバーの実装に発見された脆弱性です。\nこの脆弱性は、クライアントからフルサービスリゾルバとして動作するBIND 9のDNSサーバーに対し、細工された問い合わせを送信することにより、特定の条件下でサービス不能（DoS）にさせることができるものです。\nCVSSスコアは7.5となっています。\nトリアージを実施するA社の状況 # A社は複数のブログやWebメディアを運営する企業であり、ページ上に掲載される広告を主な収益源としています。これらのサービスは自社のオンプレミスサーバー上で提供していますが、社内業務に必要なサービスの多くはクラウドへの移行が完了しており、社内業務で自社のオンプレミスサーバーへアクセスすることはほとんどありません。\nA社では、下記の2種類の用途でそれぞれ独立したDNSサーバーを運用しており、いずれも今回の脆弱性の影響を受けるバージョンのBIND 9を利用しています。\n権威DNSサーバー：ブログやWebメディアのドメインの問い合わせに応答する。 フルサービスリゾルバ：社内業務に利用するオフィス端末のインターネットアクセスに利用する。 トリアージ例 # A社では、脆弱性の危険度の分類を低・中・高で分類しており、CVSSスコアが7.5の脆弱性の危険度は「高」として分類されます。\nただし、2種類のDNSサーバーのサービス停止によるビジネスインパクトをそれぞれ下記のように考慮してトリアージを実施しました。\n権威DNSサーバー：利用者がブログやWebメディアの閲覧ができなくなり、A社の収益の多くを占める広告収入への影響が大きい。 フルサービスリゾルバ：社内業務に必要な多くのサービスをクラウド化しており、かつ、代替DNSサーバーとしてISPのDNSサーバーを設定しているため、社内業務への影響は限定的である。 今回の脆弱性はフルサービスリゾルバのみに影響することから、ビジネスインパクトは限定的であると考え、優先度を下げて対応を実施することとしました。\n"},{"id":10,"href":"/TriageGuidelines/docs/columns/columns2/","title":"危険度がInfoの脆弱性の扱い方","section":"コラム","content":" 危険度がInfoの脆弱性の扱い方 # 脆弱性診断のレポートではCritical/High/Medium/Low以外にInfoが検出されることがあります。\nInfoとは、診断対象のソフトウェアやシステムにおいて、気になる挙動や推奨するべき設定など、価値のある情報を伝えるためのレベルを指します。Infoには、セキュリティに関する問題だけでなく、その他の情報も含まれることがあります。Info以外に情報、None、脅威がゼロの脆弱性と表現されることもあります。\n具体的には、下記に該当するものがInfoで報告された脆弱性として分類されています。\n現時点では脅威が顕在化していないが、セキュリティ上良くない実装や設定に関する指摘 セキュリティテスターが気になった挙動に関する指摘(不具合なども含まれます。) セキュリティを向上させるための設定や推奨事項に関する指摘 Infoで報告された脆弱性は、Critical/High/Medium/Lowの脆弱性と比較して、対応の優先度を低く設定して問題ありません。\nただ、現時点で脅威が顕在化していないため危険度が低いと判断されているものも含まれています。そのため、アプリケーションやシステムに他の脆弱性や脅威が発生した場合には組み合わせて悪用されることで、危険度が上がる可能性があり注意が必要です。\nInfoで報告された脆弱性については内容を確認し、対応可能であれば調査や改善することを検討するようにしてください。特にブラックボックステストによるセキュリティテストでは決められた時間内でテスターが全ての挙動を調査することは難しいです。 そのため、指摘された項目については、念のため対象箇所のソースコードを確認することをお勧めします。\nまた、Infoにはセキュリティを向上させるためのヒントや参考情報が提供されている場合があります。今後の自社でのセキュアな開発に役立てる情報源として活用することをお勧めします。\n"},{"id":11,"href":"/TriageGuidelines/docs/chapter2/section2/","title":"脆弱性の前提条件","section":"2章 トリアージの精度向上","content":" 脆弱性の前提条件 # 脆弱性が報告される際、よく見られるのがソフトウェアのバージョンに基づく影響範囲です。しかし、自社のシステムの使用方法次第では、脆弱性情報に記載されているバージョンを使用していても、影響を受けない場合があります。\n例えば、脆弱性が特定のモジュールや設定に依存している場合、それらの条件が満たされていなければ影響を受けないことがあります。\nソフトウェアバージョン以外の前提条件の例 # 具体的には、以下のようなケースが存在します。\n特定のモジュールをインストールしている場合にのみ影響がある (多くのCVEで該当) 特定の機能を利用/有効化している場合のみ影響がある (例：Apache HTTP Serverでmod_proxyが有効な場合 等) 特定の設定値をon/off、あるいは特定の値に設定している場合のみ影響がある (例：log4jなどJavaベースのアプリにてJVMの特定の起動オプションを指定する場合 等) 前提条件の確認方法の例 # 脆弱性の前提条件を把握するためには、次のような方法が考えられます。 使用しているライブラリなどのバージョン情報以外の情報を確認したり、参考サイトやベンダー情報を参照します。その上で、自社開発システムの場合などには、該当のソフトウェアの設計書やソースコードを調べる必要があります。\nシステムへの影響を見極めるために確認が必要なこと # 脆弱性情報に加え、自社開発システムに関しても以下の項目を確認する必要があります。ただし、どの範囲まで確認するかは、脆弱性の特性によって異なるため、一概には言えません。\nシステムの構成 システムの内部仕様/外部仕様 実際の設定値 これらの情報を確認することで、最も一般的な対応策である「ソフトウェアのバージョンアップ」に加え、機能の一時的な無効化など、他の柔軟な対応策を検討できるようになります。それにより、トリアージの優先順位付けがより柔軟に行えるようになります。 (例：⁠regreSSHion(CVE-2024-6387)において、LoginGraceTimeの設定で緩和が可能 等)\n注意 # 注意すべき点として、システムを調査する際仕様書を基に判断したものの、その仕様書が古く、実際のシステム環境と一致していない場合や、誤った確認方法を用いたために脆弱性が存在しているにもかかわらず、影響がないと判断してしまうケースがあります。 運用者のスキル・調査の方法などを踏まえて、「ソフトウェアのバージョンアップ」を優先するほうが安全であるケースがあるため、注意して判断を行ってください。\n"},{"id":12,"href":"/TriageGuidelines/docs/chapter4/section2/","title":"例外対応の想定 ","section":"4章 トリアージ後の対応","content":" 例外対応の想定 # 実際の現場では修正コストの観点以外にも、様々な理由で、基本方針通りの対応が難しいケースに遭遇すると思います。\n例外対応の条件 長時間のシステム停止が発生する場合(運用上サービスの停止を許容できないなど) 修正に長期間の対応が必要となる場合（修正対応をした場合に本来予定しているリリースに間に合わなくなるなど） そのため、根本的な修正が難しい場合には、例外的な対応を行うことになるでしょう。\nその際、どのような対応を行うことができるか、事前にある程度具体的な選択肢を用意しておくことが大切です。\nここでは想定しておくべき選択肢の例をいくつか記載します。\n期限 例外対応の実施期限の設定（根本的対策を実施する目途を決めておく） 緩和策の選択肢 公開されている緩和策の実施（根本対策ではない暫定的な対応策） アクセス制限の実施 セキュリティ製品などの利用（IPS・WAFなどで防御を行う） 提供機能やサービスの縮退 攻撃に備えて監視面を強化する 内部的な対応フロー 例外対応が発生した際の意思決定者は誰になるのか、その際どのようなフローで対応の内容を決定するのか事前に決めておくようにする。 なお、あまりにも例外的な対応が多くなりすぎてしまう場合には、そもそもの基本方針の取り決めについても見直すべきです。\n"},{"id":13,"href":"/TriageGuidelines/docs/chapter2/","title":"2章 トリアージの精度向上","section":"Docs","content":" 2章 トリアージの精度向上 # 第1章では、基本的な判断基準を提示しましたが、これらの基準は専門知識がない人でも使えるように設計されているため、実際の攻撃リスクとの乖離が生じる可能性があります。\nこの章では、専門的な知識を活用して脆弱性の危険度や影響範囲をより正確に評価する方法を紹介します。\n第1章では対応の優先度を「対象の重要度」と「脆弱性の危険度」で決定しましたが、正確なリスク判定を行うためには、実際に攻撃される可能性やビジネスへの影響といった要素も考慮する必要があります。\nベンダーのCVSSなどの評価は、一般的な観点から行われているため、組織固有の状況に合わないことがあります。したがって、組織の状況に合わせて評価を調整する必要があります。\n精度向上のために考慮するポイント # 正確なリスク判定のために、以下の点を考慮するべきでしょう。\n脆弱性の影響範囲 脆弱性の前提条件 Exploitの流通状況 Exploitの実現性 これらの要素を考慮した結果、対応の優先度が変わることもあります。\n本章では、正確なリスク判定を行う方法を説明しますが、状況によっては正確さよりも迅速なリスク判定が求められる場合もあります。また、担当者のセキュリティ成熟度や専門性などによって、リスク判定に掛かる時間は異なることがあります。\nそのため本章で紹介する方法については、組織やシステムに合わせて取り入れるかどうかを検討してください。\n"},{"id":14,"href":"/TriageGuidelines/docs/chapter3/section3/","title":"EPSS","section":"3章 トリアージに利用できるフレームワーク","content":" EPSS # EPSS(Exploit Prediction Scoring System)のスコアは、各脆弱性に対して0から1の範囲で算出され、スコアが高いほど攻撃に利用される可能性が高くなります。\nスコアリング方法:\nCVEが割り当てられた脆弱性についての詳細を収集します。 ExploitDBやKEVカタログ(Known Exploited Vulnerabilities catalog)から公開されているエクスプロイトコードや攻撃に使用された実例を収集します。 上記の情報をEPSSのモデルからモデリング手法を用いてスコアを算出します。 どのように使うのか # CVEが割り当てられた脆弱性のリスク評価にはCVSSが用いられ、組織内で定められたパラメータが採用されることが多いですが、まだ発生していないリスクの発生可能性を見積もるのは非常に難しいといえます。\nそこで、EPSSのように、脆弱性が実際に悪用される確率を表す指標を採用することも効果的です。 EPSSは実行環境を考慮していないため、リスク評価の完全な指標として用いることは推奨されませんが、他に脆弱性の発生可能性を見積もる手段がない場合には有効です。\nトリアージのパラメータとして必ずしも採用する必要はありませんが、トリアージ担当者は「判断の指標」として知っておくべきです。\nトリアージ設定におけるEPSS確認のメリット # 脆弱性の優先順位付け\n脆弱性が実際に悪用される可能性を考慮して、優先順位を設定できます。組織内に脆弱性の危険度設定に関するノウハウがない場合や、CERTが設立されたばかりの際には、危険度設定の参考値としてEPSSを活用できます。\nただし、EPSSはあくまで予測値であり、全ての脆弱性に設定されているわけではない点に留意する必要があります。\nEPSSを指標として採用する場合、3章の後半で紹介されているKEVカタログなどの公開情報と組み合わせて使用することを推奨します。\n"},{"id":15,"href":"/TriageGuidelines/docs/chapter2/section3/","title":"Exploitの流通状況","section":"2章 トリアージの精度向上","content":" Exploitの流通状況 # 脆弱性を悪用する攻撃コードの流通状況を把握することで、対応までの時間的猶予（緊急度）をより正確に判断できます。\n以下のExploit流通状況の中では、「攻撃事例がある」場合が最も緊急性が高く、即座に対応すべき脆弱性と判断できます。\n攻撃事例がある 脆弱性の実証コード（PoC）が出回っている （PoCが正しいものであるかの確認が必要） 理論的に脆弱なだけで実証されていない 補足\nExploitの流通状況だけで対策の優先順位を決定することは推奨されません。即座に攻撃される可能性があるのか、攻撃手段が流通してしまっているのかを元に判断することを意図しています。\nどのように情報収集するのか # 悪用されやすかったり、利用者が多いプロダクトの脆弱性については、ニュースサイトや第1章で紹介した脆弱性情報サイト（ JPCERT/CC、JVNなど）から情報が得られやすいです。\nしかし、注目される脆弱性は限られているため、使用しているプロダクトに関連する攻撃コードの流通状況については、常に注意して情報を収集する必要があります。\n実証コード（PoC）の掲載サイト # 脆弱性の実証コード（PoC: Proof of Concept）の掲載サイトや脆弱性スキャンツールベンダーのサイトなどから情報が得られやすいです。\nExploitDB Vulnerability \u0026amp; Exploit Database vulnerability-lab Packet Storm Security 悪用された脆弱性リスト # 米国CISA（Cybersecurity＆Infrastructure Security Agency）が提供する、実際に悪用が確認された脆弱性リストであるKEVカタログ（Known Exploited Vulnerabilities catalog）を参照することも有効です。ただし、脆弱性が公開された直後の場合、悪用がまだ確認されていないこともあるため、対応の優先順位を決定する際には注意が必要です。\n継続的にKEVカタログから情報収集する場合は、情報更新時にお知らせを受領するための登録フォームがあります。\n検索 # Web検索や脆弱性情報管理ツールでExploitの流通状況を調べる手段もあります。\n検索クエリに「CVE番号」や「CVE番号　PoC」、「CVE番号　\u0026ldquo;in the wild\u0026rdquo;」などを設定しての検索は有効です。ただし、誤った情報や偽PoC、偽攻撃ツールも存在しているため、信頼できる情報であるのか慎重な判断が必要です。\nFlashpoint Vulnerability Intelligence - VulnDB（有償） 自社開発のアプリケーション等の場合 # 自社開発のアプリケーションは一般的なプロダクトではないため、実証コード掲載サイトやKEVカタログを参照しても、Exploitの流通状況が把握できないことが多々あります。\n「脆弱性の前提条件」の項目や脆弱性診断を実施したベンダーからの報告内容を基に、同様の攻撃手法が実行される可能性やその影響について調査する必要があります。\n"},{"id":16,"href":"/TriageGuidelines/docs/chapter1/section2/","title":"トリアージガイドラインの適用範囲を決める","section":"1章 トリアージガイドラインの作成","content":" トリアージガイドラインの適用範囲を決める # トリアージガイドラインの作成にあたって、このトリアージガイドラインをどの範囲のシステムに適用するかを決める必要があります。\nシステムの重要度によってトリアージの基準が異なることがあります。そのため、今回作成するトリアージガイドラインをどのシステムに適用するのかといったスコープを決めて、「本トリアージガイドラインの適用範囲」として対象となるシステムを明確にしておきましょう。\n範囲定義の例\n- 「当社およびグループ会社が開発・運用するシステムのうち、個人情報を扱うすべてのシステムを対象とします」 - 扱う資産の金額が1億円以上 - 利用者数が1,000人以上 - 可用性99.5％以上 - 個人情報、機密情報の有無 "},{"id":17,"href":"/TriageGuidelines/docs/chapter5/section3/","title":"経営者の指示による優先度変更","section":"5章 事例","content":" 経営者の指示による優先度変更 # 経営判断により脆弱性対応よりもリリースを優先しなければいけない案件が存在することもあります。\n例として次のような事例を考えてみましょう。\n「会社の代表が株主総会で会社の認証システムをすべて顔認証システムに3ヶ月以内に切り替えると株主に伝えて社員がその場で初めて内容を認識した」とした場合です。\n上記の場合、3ヶ月という短納期の中で開発から脆弱性診断を実施するという流れの中で他案件との兼ね合いや他フローとの兼ね合いで十全に脆弱性診断を実施ができず現場としては無理難題であるため期限内に組織で定められた脆弱性トリアージ実施をしてリリースすることが難しい可能性が考えられます。\nしかし、ビジネスインパクトを考えた際に、IRとして会社代表が出していることから、ブランドイメージの悪化や株価への悪影響が考えられます。\nそのため、上記の場合にはトップダウンで実施しなければならない案件として例外的な対応を行う必要があります。\n仮に会社の脆弱性トリアージの実施規定として以下のようなものがあるとします。\n【社内規定での脆弱性トリアージ】\nリスク値は緊急、高、中、低の4段階で考えられるとする リスク中以上の脆弱性はリリース前に全て修正して実施する 今回のケースでは、3ヶ月という短納期の中で実施しなければならないため、十分な脆弱性診断の期間と修正期間が無く、脆弱性トリアージ規定を満たせない可能性があります。つまり、想定していたよりもリスクが高い状態のままリリースするという経営判断をすることになります。\nそのため、以下のような例外を作り、組織として最終的にリスクを減らすための方針を立てることもあります。\n【組織的例外フロー】\n組織の代表のトップダウン案件は他案件より優先して脆弱性診断を実施する 組織の代表のトップダウン案件で検出された脆弱性は、リスク高以上はリリース前に対策を実施して、リリース後1ヶ月以内にリスク中の脆弱性の対策を実施する 残存した脆弱性に関してインシデントが起きた際には組織の代表が責任を取る 日常の運用とは異なる例外的なフローを設けたことで、ビジネスインパクトを考慮することができました。\n(経営者が判断したポイントは？)\n・3か月でシステムをリリースすることを決定した ・組織的例外フローを受け入れた（リスク受容した） ・事故ったときの責任は下々ではなく経営者だぞ\n今回の例の中で、経営者が判断したポイントとなるのは下記の3点となります。\n短期間でのリリース方針\n３ヶ月という短期間でのシステムリリースを決定することで、ビジネス価値の最大化に繋がります。 しかし、今回のケースとは異なり、脆弱性が多数発見された場合には、経営者の判断で、リリース時には重要度の高い中でも特に重要なものに対して優先的に対応を行うといったトリアージが必要となります。\n例外承認 (リスク受容)\n経営者が組織的例外フローを受け入れて実施することで、迅速な意思決定が可能となり、責任の所在も明確になります。しかし、例外的なフローはあくまで緊急時や特別な状況における対応であり、推奨されるものではありません。そのため、例外承認を行う場合には、経営者（責任者）が慎重に判断し、適切なリスク評価を行うことが重要です。\nさらに、例外承認後には脆弱性をトレースし、対応期限を設定することが求められます。また、監視体制の強化やリスク低減策の導入など、継続的な管理が効果的です。\nインシデントの担当責任を明確にする\nリスクを残したままサービスをリリースすることで、インシデントが発生する可能性があります。万が一インシデントが発生した場合、その責任はセキュリティ担当者ではなく、経営者が負うことでビジネス全体に関わる問題であるとしてリスク管理を明確にできます。\n経営判断として、時にはビジネスが優先されることもあります。しかし、脆弱性を放置したことによって、それ以上のダメージを負うことも考えられます。 経営者には、そういったリスクがあることも伝えた上で、経営判断を行ってもらう必要があるでしょう。\n"},{"id":18,"href":"/TriageGuidelines/docs/chapter1/section3/","title":"脆弱性の影響範囲の調査","section":"1章 トリアージガイドラインの作成","content":" 脆弱性の影響範囲の調査 # 脆弱性情報の収集や脆弱性に関する具体的な内容や原因を理解するためには、セキュリティに関する専門知識が必要になります。さまざまな組織や機関から脆弱性情報が公開されていますが、最初は信頼できる情報源から脆弱性情報を収集するようにしましょう。 以下は、収集する情報源のサイト一例です。\nJPCERT/CC JVN NVD（英語サイトのみ） また、脆弱性診断を実施して脆弱性を調べるのも有効です。脆弱性診断の対象は、あらかじめ診断事業者と発注者間で決められていることが一般的です。そのため、報告される脆弱性情報は対象が限定的ですが、報告された範囲に限らず、類似の脆弱性が他のシステムにも影響がないか確認するようにしてください。\n"},{"id":19,"href":"/TriageGuidelines/docs/chapter3/","title":"3章 トリアージに利用できるフレームワーク","section":"Docs","content":" 3章 トリアージに利用できるフレームワーク # ３章では、トリアージの精度をもっと上げていきたい上級者向けの情報です。\nトリアージの精度を高めるために活用できるフレームワークをいくつか紹介します。ぜひ活用してください。 すべてのフレームワークを使う必要はなく、自組織において利用するメリットがあれば採用を検討してください\n"},{"id":20,"href":"/TriageGuidelines/docs/chapter2/section4/","title":"Exploitの実現性","section":"2章 トリアージの精度向上","content":" Exploitの実現性 # 脆弱性が存在しても、攻撃を実行できる人の数やスキルによって、その危険度は変わることがあります。\n対象システムへのアクセス # CVSSの攻撃元区分（AV: Attack Vector）は、脆弱性がどのような経路で攻撃可能かを評価しており、「ネットワーク」「隣接」「ローカル」「物理」といった選択肢があります。\n物理アクセスが必要な脆弱性でも、自動販売機のように誰でもアクセス可能な場所にあるシステムと、防犯ゲートで厳重に守られたデータセンターの奥に設置されたシステムでは、攻撃の実現性が大きく異なります。\n正当な権限を持った人による内部犯行を脅威として想定するかによっても異なります。\n複数の脆弱性の組み合わせ # Webアプリケーションでログイン時にセッションIDを変更しない場合、セッションフィクセイション脆弱性が報告されることがあります。しかし、この挙動だけで即座に被害が発生するわけではありません。攻撃者が指定したセッションIDを、何らかの手段で被害者に強制的に使用させる別の脆弱性が必要です。\n例えば、セッションアダプション、クッキーモンスター、クロスサイトスクリプティングなどが該当します。これらの脆弱性が適切に対応されている場合、危険度は低くなるでしょう。\nExploitの開発難易度 # 例えばSQLインジェクション脆弱性で、'and'A'='Aといったチートシートに載っている簡単なパターンや、脆弱性診断ツールで使用される典型的な攻撃パターンが成功する脆弱性が報告された場合、技術レベルの低い攻撃者でも攻撃可能である可能性が高いといえます。\n一方で、使える文字が限られていたり、WAFが設置されているなどで、それらの制限を回避する必要がある場合、それを行える高度な技術を持った攻撃者のみが脅威となります。対象となるサーバーソフトウェアやブラウザOSなどに対する深い知識が必要な場合も同様です。\n攻撃の難易度の判断 # 攻撃難易度を判断するためには、脆弱性や攻撃手法に対する専門的な知識が必要です。\nまずは脆弱性診断の報告書などを確認し、実害につながることが実証されているか、PoC(Proof of Concept: 概念実証)が記載されているかどうかを確認してください。\nPoCが示されていない場合や、脆弱性の可能性のみが示唆されていて現実的な被害に結びつくか不明な場合には、自身でExploitを作成してみる必要があるかもしれません。\n診断ベンダーによっては、実際の攻撃の可否までは検証せず、不正な挙動を見つけたという段階で報告してくる場合があります（被害につながるかわからないけれどもとりあえずすべて修正するつもりであれば、この報告方針の方が有用です）。\nなお、脅威が小さいと判断した場合でも油断は禁物です。Exploitの流通状況で述べたように、ExploitやPoC、前提情報が公開されてしまった瞬間に状況は一変します。\nExploitの難易度は、脆弱性が発覚し、Exploitが公開されないことを祈っている初期段階での判断基準として利用するにとどめ、長期的な判断基準として利用することは避けた方が良いでしょう。\n"},{"id":21,"href":"/TriageGuidelines/docs/chapter3/section4/","title":"SBOM","section":"3章 トリアージに利用できるフレームワーク","content":" SBOM # 現代のソフトウェア開発では、複数のモジュールやシステムを組み合わせた構成が一般的です。そのため、システムで使用されているモジュールやライブラリ、フレームワークなどのソフトウェア依存関係を完全に把握するのは難しくなっています。\nこのような課題を解決する手法として、SBOM（Software Bill of Materials）を用いた管理手法が注目されています。SBOMとは、ソフトウェア製品に含まれるコンポーネント(部品)をリスト化したもので、ソフトウェアのコンポーネント一覧表を指します。実際には、SBOMに対応したリストを作成でき、SBOMの管理を行えるツールを使用して管理を行います。\nSBOMを導入することで、新たな脆弱性が公表された際に、その影響を受けるソフトウェアを即座に特定できるようになります。これにより、脆弱性の管理だけでなく、ライセンス違反やサポート期限が切れたソフトウェアの確認にも活用できます。\nまた、経済産業省により「ソフトウェア管理に向けたSBOM（Software Bill of Materials）の導入に関する手引ver2.0」が公開されており、注目されているSBOMですが、脆弱性管理やライセンス管理のメリットがある一方で、完全に解決できない課題やSBOMを運用する上での課題もあります。\nSBOM導入のメリット\nソフトウェアコンポーネント管理の効率化・自動化、管理工数の削減 新たな脆弱性が発見された際に影響を受けるソフトウェアに含まれるコンポーネントの特定、特定までの時間短縮 OSSなどのライセンス情報の管理 EoS(End of Support)、EoL(End of Life)の管理 SBOM導入に関する課題\nSBOMの管理対象とするコンポーネントの範囲が不明確だと、効果的な活用ができない SBOMを導入すための環境整備や学習に工数を要する コンポーネントの検知漏れや誤検知 SBOM出力結果の精査に多くの工数が掛かる "},{"id":22,"href":"/TriageGuidelines/docs/chapter1/section4/","title":"トリアージで決めるべきこと","section":"1章 トリアージガイドラインの作成","content":" トリアージで決めるべきこと # 収集した脆弱性情報を効率的に対応するためには、統一的なトリアージの対応基準を設定することが重要です。 トリアージの対応基準軸として、対象資産の重要度と脆弱性の危険度を基に対応優先度を決定できるようにしましょう。\n対応優先度 = 対象資産の重要度 × 脆弱性の危険度\n対象資産の重要度と脆弱性の危険度については、対象の重要度評価と脆弱性の危険度評価に記載していますので、そちらをご確認ください。\n対応優先度の区分は、過度に複雑化すると管理や運用が難しくなり、単純すぎると適切なトリアージが困難になるため、3,4段階程度の区分に分けることをお勧めします。それぞれの区分に応じた対応要否と対応期限を決めるようにしましょう。 対応の要否と期限の決め方については、対応の要否と期限を決めるに記載していますので、そちらをご確認ください。\n対象の重要度評価 # 脆弱性の評価が完了したら、次に資産の重要度を評価します。 まずは重要度の評価基準の選定をするところから始めると良いでしょう。 顧客情報や機密性の高い情報が侵害された場合のビジネスインパクトを検討し、対象システムが扱う情報資産の重要度に基づき対策の優先度を設定します。 以下は、評価分類の一例です。\n資産の種類に基づく分類\n重要度高: 金融データ、顧客情報、特許性を有する製品や技術情報 重要度中: 業務データ、従業員の勤怠情報 重要度低: ホームページ等で、既に公開されている情報 影響度の規模に基づく分類: サービス利用者の規模に応じて重要度を決定します。\n重要度高: 利用者数1万人以上 重要度中: 利用者数1000人以上 重要度低: 利用者数1000人未満 利用者層に基づく分類\n重要度高: 官公庁利用者(政府調達等) 重要度中: 技術者、システム管理者、企業の担当者 重要度低: 一般の利用者(BtoCのサービス等) 上記の分類以外でも、改竄や外部漏洩が企業の存続に深刻な危険をもたらす情報があれば、その情報を高い重要度で扱うことが推奨されます。 また、組織がISMS(ISO27001)認証を受けている場合には、情報資産を管理している台帳の重要度評価を採用することも効果的です。\n脆弱性の危険度評価 # 見つかった脆弱性について、脆弱性の危険度を確認し、対応の緊急性を評価する基準を設けます。最初はCVSS基本値のみを参考にしても構いません。\n評価方針の設定\n脆弱性の危険度評価のために、CVSS基本値や脆弱性診断事業者が提供する危険度評価を参考し、各評価を基に脆弱性の緊急度を分類します。 また、例えばCVSSでは「攻撃元区分」「攻撃条件の複雑さ」「攻撃前の認証要否」など、複数の要素を元に最終的な値が算出されますが、特に重視する項目があれば基準の一つとしても良いでしょう。 危険度評価の定義例 (3段階の場合の例)\n高・・・CVSSが7.0 - 10.0 中・・・CVSSが4.0 - 6.9 低・・・CVSSが0.0 - 3.9 危険度評価の定義例 (4段階の場合の例)\nCritical, High, Medium, Low ※3段階の場合と同様、それぞれの段階で定義を記載する CVSSのみで危険度を評価するのは専門知識がない人でもできる単純な方法ですが、実際の攻撃リスクと乖離する可能性があります。 2章以降では、専門的な知識を活用して脆弱性の危険度や影響範囲をより正確に評価する方法を紹介します。\n対応の優先度を評価 # 脆弱性の危険度評価と対象の重要度評価から、優先度マトリックスを作成して対応の優先度を決めます。この表は、危険度を縦軸に、重要度を横軸に配置し、優先度を評価するための基盤となります。以下は優先度マトリックスの例です。ただし、優先度評価のカテゴリーは、プロジェクトに合わせて調整されます。\n優先度マトリックスの例\n重要度高 重要度中 重要度低 危険度高 優先度緊急 優先度高 優先度中 危険度中 優先度高 優先度中 優先度低 危険度低 優先度中 優先度低 優先度低 この優先度マトリックスを使用して、プロジェクトにおける脆弱性の対応を適切に評価し、適切な対策を講じるための指針を提供します。\n"},{"id":23,"href":"/TriageGuidelines/docs/chapter3/section5/","title":"CISA KEVカタログ","section":"3章 トリアージに利用できるフレームワーク","content":" CISA Known Exploited Vulnerabilities (KEV) カタログ # Known Exploited Vulnerabilities (KEV) カタログ（悪用された既知の脆弱性カタログ）は米国土安全保障省（DHS）のサイバーセキュリティ・インフラストラクチャセキュリティ庁（CISA: Cybersecurity and Infrastructure Security Agency）が公開している、悪用が観測された脆弱性の一覧をまとめたカタログです。もともとは連邦政府機関のシステムを対象に、脆弱性を悪用した攻撃へ対処するために作成されたものです。\n2024年11月現在、このカタログには、VPN機器のRCE脆弱性やOSの特権昇格の脆弱性など、1200件近くの脆弱性が登録されています。カタログへの登録条件は下記の3つです。\nCVE番号が割り当てられていること 悪用がされている確たる証拠があること ベンダーからのアップデートなどの明確な対策方法があること このうち、「2. 悪用がされている確たる証拠があること」には、脆弱でないシステムやハニーポットに対する悪用の試行も含まれていますが、スキャン行為やエクスプロイトの研究、PoCの公開はこれに含まれません。\n他組織への攻撃ですでに悪用されたことのある脆弱性は、別の攻撃でも利用されることが多いため、迅速に対処するべき脆弱性であると考えられます。\n"},{"id":24,"href":"/TriageGuidelines/docs/chapter3/section6/","title":"Risk Rating Framework: OWASP Risk Rating Methodology","section":"3章 トリアージに利用できるフレームワーク","content":" Risk Rating Framework: OWASP Risk Rating Methodology # OWASP Risk Rating Methodologyは、OWASPが提供する、アプリケーションセキュリティに特化したリスク評価手法です。\nhttps://owasp.org/www-community/OWASP_Risk_Rating_Methodology 本評価手法では、以下のような評価基準で判定しています。\nリスク = 可能性 × 影響（Risk = Likelihood x Impact） 可能性 （脅威エージェントの要因 ＋ 脆弱性の要因） / 2 影響 （技術的要因 ＋ ビジネスへの影響要因） / 2 「リスク（Risk）」は、「可能性」と「影響」を複数の要因に分けて評価され、各要因に基づきスコアを算出し、その平均値で評価を行います。\n以下に概要を示します。\n「可能性（Likelihood）」は、特定の脆弱性が攻撃者に発見され、悪用される可能性の大きさを指します。\n以下の2つの要因についてスコアリングし、合計平均値を可能性の値として利用します。\n脅威エージェントの要因（Threat Agent Factors）\n想定する攻撃者（Threat Agent）による攻撃が成功する可能性を推定します。 スキルレベル（Skill Level） 動機（Motive） 機会（Opportunity） サイズ（Size） 脆弱性の要因（Vulnerability Factors）\n対象とする脆弱性について、発見や悪用される可能性を推定します。 発見の容易さ（Ease of Discovery） 悪用の容易さ（Ease of Exploit） 認識（Awareness） 侵入検出（Intrusion Detection） 「影響（Impact）」は、攻撃が成功した際に影響がある以下の2種類の影響について想定します。\n技術的要因（Technical Impact Factors）\nアプリケーションや使用するデータ、提供する機能に対する技術的影響を推定します。 機密性の喪失（Loss of Confidentiality） 整合性の損失（Loss of Integrity） 可用性の損失（Loss of Availability） 説明責任の喪失（Loss of Accountability） ビジネスへの影響要因（Business Imapct Factors） 経済的損失（Financial damage） 風評被害（Reputation damage） コンプライアンス違反（Non-compliance） プライバシー侵害（Privacy violation） これらの値を元に、リスクの重大度をマトリックスから導き出します。\nリスク判定の際に注意すべきは、「可能性 x 技術的要因」と「可能性 x ビジネスへの影響」の2軸で検討する必要がある点です。\n「技術的な影響度は高いが、全体的なビジネスへの影響度は低い」といった場合、ビジネスへの影響度を優先して判断するのが妥当と考えられます。 評価している脆弱性のビジネス上の背景を理解することが、リスクを適切に判断する上では非常に重要です。 "},{"id":25,"href":"/TriageGuidelines/docs/chapter1/section5/","title":"対応の要否と期限を決める","section":"1章 トリアージガイドラインの作成","content":" 対応の要否と期限を決める # 報告された問題に対して、対応するかの要否や対応期限を決めてください。この2点を決めることで検出された問題に対して一定の基準を元に対応を円滑に行うことができます。 対応要否や対応期限については、前節で説明した優先度マトリックスの評価結果を参考に検討してみてください。下記の表では優先度マトリックスの結果を元に対応要否や対応期限を決めた場合の例となります。\n優先度マトリックスによる対応要否と対応期限の例\n対応要否 対応期限 優先度緊急 対応する 1~2営業日以内に対応 優先度高 対応する 1週間以内に対応 優先度中 対応する 3ヶ月以内に対応 優先度低 現状対応しない 次回のシステム更改のタイミングで対応し、現システムでは対応しない また、これ以外にも対応要否や対応期限を決めるいくつかのパターンを例として下記に記載しています。なお、本節で提示しているパターンは簡易な対応であり、より高度な対応について知りたい方は４章を参照してください。\n対応の要否\n脆弱性の危険度を基準に判断 危険度が中以上の場合は対応する CVSSのスコアが3.9以下の場合は対応しない 資産や規模の影響度を基準に判断 組織内での価値が高いシステムやデータに影響がある場合には対応する サービスへの影響度合いが小さい場合には対応しない 攻撃の影響をすぐに受けるかを基準に判断 攻撃の事例が観測されており、JPCERT/CCなどで広く注意喚起されているので対応する 外部からアクセスでき、すぐに攻撃を受ける可能性がある場合には対応する 対応期限\n何日以内にやるかなど日数で決めるパターン 毎月の月末にやるなど特定の時期で決めるパターン 影響度合いから決めるパターン 即時、次回メンテナンスなどイベント単位で決めるパターン 補足\n対応要否に用いる危険度の基準についてはIPAが公開している「ECサイト構築・運用セキュリティガイドライン」の下記の記載を参考にしてみてください。\n利用しているソフトウェア等について、脆弱性情報を収集し、脆弱性の危険度が「高」の脆弱性については迅速に、危険度「中」は公開までにセキュリティパッチの適用や最新版へのバージョンアップによるアップデートを実施してください。\nそれ以外の脆弱性については、セキュリティパッチの適用や最新版へのバージョンアップを行うかどうかを、脆弱性によるシステムへの影響等を考慮して判断してください。\n"},{"id":26,"href":"/TriageGuidelines/docs/chapter1/section6/","title":"脆弱性の管理方法","section":"1章 トリアージガイドラインの作成","content":" 脆弱性の管理方法 # それぞれの脆弱性への対応状況を適切に管理することで対応漏れやミスを防ぐことができます。 ここでは記録すべき情報と管理方法の例を記載します。自組織にとって管理しやすいツールを選択してください。\n記録すべき情報 脆弱性概要/名称/CVE番号(公開されている脆弱性の場合のみ) 対象情報 ステータス(未対応/対応済/保留/対応しない など) 対応期限 トリアージ結果 区分 危険度 優先度 起票日 対応完了日/対応しないことを決めた日 担当者 対応方針(例外対応が発生する場合はその内容も含む) 対応の記録 対応実施日 対応実施内容(例外対応が発生した場合はその内容も含む) 管理方法 Excel 例: 脆弱性概要 対象情報 ステータス 対応期限 システム区分 脆弱性危険度 トリアージ結果 起票日 対応完了日 担当者 対応方針 対応の記録 1 CVE-2024-0001 host_A 対応済 2024/9/11 重要度高 危険度高 優先度緊急 2024/9/1 2023/9/5 山田 ・・・ ・・・ 2 CVE-2024-0002 host_A 未対応 2024/12/32 重要度高 危険度低 優先度中 2024/9/1 一ノ瀬 ・・・ ・・・ 3 CVE-2024-0001 host_B 保留 2025/10/31 重要度中 危険度低 優先度低 2024/10/1 田中 ・・・ ・・・ GitHubのissueやProject Jira OWASP Defectdojo 普段使っているツール Slack、Teamsなど "},{"id":27,"href":"/TriageGuidelines/docs/chapter1/section7/","title":"最後に","section":"1章 トリアージガイドラインの作成","content":" 最後に # １章では、ひとまず優先度をおおまかに優先度付けするための基準作りについて説明しました。 この基準で実際にトリアージをしてみると、例えば優先度高に分類した対象が大量出てきてしまって、さらにその中で優先順位付けが必要になる、ということがあるかもしれません。あるいは、この基準で算出した脆弱性危険度と感覚的な危険度に乖離があるかもしれません。\n前述の通り、ガイドラインは一度作成したものを使い続けるのではなく、脆弱性対応が完了した後、あるいは1～2年のサイクルで、トリアージ時の改善点（反省点）を踏まえ、アップデートすることを推奨します。\nその際まずは、基準の定義を変更することで調整できないかどうか検討してみてください。例えば危険度のボーダーラインとなるCVSS値を上下させたり、優先度マトリックスの定義の変更などが考えられます。\nそれでも調整しきれない場合は、資産価値や危険度をより詳細に評価したり、例えば攻撃コードの流通状況など別の評価軸を導入していく必要があります。ただしそのためには多くの場合、詳細な評価をするためにより専門的な知識が必要になってきます。２章ではそれらの手法について紹介します。\nどうしてもすべてのシステムに適用できる統一的な基準の調整が難しいようであれば、特定のシステム専用に基準値の違うガイドラインを作成することも検討してください。\n"},{"id":28,"href":"/TriageGuidelines/docs/template/","title":"トリアージガイドライン【テンプレート】","section":"Docs","content":" トリアージガイドライン【テンプレート】 # 1. 総則 # 1.1 本ガイドラインの目的 # 本ガイドラインは、○○株式会社（以下当社）で新規開発するシステムや運用中のシステムについて、脆弱性診断や外部からの報告などにより実際に脆弱性の存在が発覚した場合に、そのトリアージ（対応優先度の判断）や対応方針を事前に定めておくことによって、迅速かつ正確な脆弱性対応をすることを目的とします。 なお、日々公表されている脆弱性情報の収集や、その影響有無や範囲の確認の手順等については、本ガイドラインの対象外です。\n1.2 役割と責任 # 本ガイドラインにおける役割と責任は次のとおりです。\nCISO CISOは、当社規程の定めに従い任命されます。 CISOは、当社が開発・運用するすべてのシステムについて、リスク管理の責任を負います。インシデント対応や準備に対してかかる費用についての全決裁権を持つものとします。\nセキュリティ統括室 セキュリティ統括室は、各事業部門のシステムで発覚した脆弱性や対応状況について、管理・監督する責任を負います。 本ガイドラインで定めた対応方針とは異なる対応を行う必要がある場合、セキュリティ統括室が判断・承認するものとします。\nシステム管理責任者 マネージャ以上の役職者とし、対象システムに応じて所管部門から選出します。 対象システムの管理業務の推進と維持管理に必要な実務全般の判断・承認の責任を負います。 システム管理責任者は、本ガイドラインに沿ってトリアージを行い、脆弱性対応を行い、結果及び対応状況をセキュリティ統括室に報告する責任を負います。\nシステム管理担当者 システム管理責任者の指示のもと、対象システムの管理業務の推進と維持管理に必要な実務作業を担当します。\n1.3 適用範囲 # 本ガイドラインは、当社およびグループ会社が開発・運用するすべてのシステムを対象とします。\n2. トリアージ # 2.1 トリアージ手順の概要 # トリアージを行う際は、まず対象システム区分の判断(2.2参照)と、脆弱性危険度の判断(2.3参照)を行います。これらの2つの判断結果に基づいて、対応優先度の判断(2.4参照)を行います。 対応の優先度が決定すると、それに応じた対応方針や期限が決定(2.5参照)されますので、それに沿って脆弱性の対応を行います。判断結果や対応状況は記録し管理します。\n--- config: layout: dagre look: classic theme: default --- flowchart TD st(開始) e(完了) receive[脆弱性の認知] asset[システム重要度の判断] vuln[脆弱性危険度の判断] priority[対応優先度の判断] report[記録] response[対応] cond{\"対応済み？ (対応不要？)\"} st--\u003ereceive; receive--\u003evuln--\u003epriority; receive--\u003easset--\u003epriority; priority--\u003ereport; response--\u003ereport; report--\u003econd; cond--\"yes\"--\u003ee; cond--\"no\"--\u003eresponse; 2.2 システム区分の判断基準 # システムは、その内容や重要性に基づき、3段階の区分に分類します。システム区分は、そのシステムで取り扱う情報や機能に大きな変更が無い限り、変化しない性質のものです。\n区分の詳細は下記に定める通り、システムで取り扱うデータによって判断します。\nどの区分に該当するかどうかが定かではない場合は、セキュリティ統括室が判断するものとします。\n区分 定義 A 金融データ、顧客情報、特許性を有する製品や技術情報を取り扱うシステム B 業務データ、従業員の勤怠情報を取り扱うシステム C ホームページ等で既に公開されている情報を取り扱うシステム 2.3 脆弱性危険度の判断基準 # 脆弱性の危険度は、４段階に分類して評価するものとします。\n危険度の詳細は下記に定める通りです。脆弱性報告にCVSS v3基本評価値が記載されている場合は、その値によって危険度を判断します。脆弱性診断ベンダーによっては、CVSSによらない固有の基準で危険度を評価する場合があります。概ね3～4段階の危険度評価がなされることが多いため、その危険度評価を利用します。\n報告にあるCVSS基本評価値や危険度評価が実態と著しく乖離している場合、あるいはどの危険度に該当するかどうかが定かではない場合は、セキュリティ統括室が判断するものとします。\n危険度 定義 Critical CVSS v3基本値 9.0～10.0\n危険度評価Critical、緊急など High CVSS v3基本値 7.0～8.9\n危険度評価High、高など Medium CVSS v3基本値 4.0～6.9\n危険度評価Medium、中など Low CVSS v3基本値 0.1～3.9\n危険度評価Low、低など 2.4 対応優先度の判断基準 # 対応優先度は、4段階に分類するものとします。前述のシステム区分と脆弱性危険度をもとに、次の表に沿って対応優先度を決定します。\n区分A 区分B 区分C Critical 緊急 高 中 High 高 中 中 Medium 中 中 低 Low 中 低 低 2.5 対応方針の基準 # 判定した対応優先度に応じて、次の方針及び期限で対応を行います。\nこの対応方針とは異なる対応を行う必要がある場合、セキュリティ統括室が判断するものとします。\n優先度 対応方針 緊急 リリース前の場合は、リリースまでに必ず修正すること\n運用中の場合は、即時対応し、日次で対応状況をセキュリティ統括室に報告すること 高 リリース前の場合は、リリースまでに必ず修正すること\n運用中の場合は、1週間以内に対応すること 中 リリース前の場合は、リリースまでに必ず修正すること\n運用中の場合は、次回の定期メンテナンス時、遅くとも３カ月以内に対応すること 低 次回の機能追加やシステム更改時に対応することとし、現システムでは対応しない 3. 対応状況の管理 # 3.1 報告 # システム管理責任者は、脆弱性を認知しトリアージした結果及び対応方針・期限について、セキュリティ統括室の指定する管理システムとフォーマットでセキュリティ統括室に報告する必要があります。\nまた、各脆弱性の対応状況に更新がある場合、適宜セキュリティ統括室に報告するものとします。 ただし対応方針で報告頻度について言及があるものについてはそれに従って報告するものとします。\n3.2 管理 # セキュリティ統括室は、各システムのシステム管理責任者から報告された、脆弱性のトリアージ結果及び対応状況や期限を管理します。\nセキュリティ統括室は、本ガイドラインの定める基準や対応方針とは異なる判断を行った場合は、その判断理由を記録する必要があります。\nセキュリティ統括室は、対応期限までに対応が完了するようシステム管理責任者をサポートするものとします。\n3.3 管理システム # 脆弱性の対応状況は、社内の標準課題管理システムであるJira(http://jira.intra.example.com/)を利用しチケット管理するものとします。\n管理システムでは、次の情報について記録を行います。\n項目 説明 脆弱性概要 名称、CVE番号(発番されている脆弱性の場合のみ) 対象 ホスト名やURLなど、対象を一意に特定できる情報 対応の進捗 現時点の対応状況(未対応/対応済/保留/対応しない など) システム区分 トリアージによって判断したシステム区分 脆弱性危険度 トリアージによって判断した脆弱性危険度 対応優先度 トリアージによって判断した対応優先度 起票日 脆弱性報告を受領した日 対応完了日 脆弱性対応が完了した日、または対応しないことを決めた日 責任者 システム管理責任者の氏名 対応期限 できるだけ具体的な日付を指定する 対応方針 ソースコードの修正、ソフトウェアのアップグレードなど 対応の記録 対応を実施した日、及び実施内容(例外対応が発生した場合はその内容も含む) 4. 附則 # 4.1 改廃 # 本ガイドラインは、セキュリティ統括室が所管し、改廃はCISOの承認を必要とするものとします。\n"}]